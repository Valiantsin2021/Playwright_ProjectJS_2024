# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: shopping Cart >> Redirected to the updated Shopping cart page after add item to Wish List
- Location: /home/runner/work/Playwright_ProjectJS_2024/Playwright_ProjectJS_2024/tests/testsPOM/shoppingCart.spec.js:38:3

# Error details

```
Error: locator.waitFor: Test timeout of 60000ms exceeded.
Call log:
  - waiting for getByText('Move to Wishlist') to be visible

    at ShoppingCartPage.waitForMoveToWishListLink (/home/runner/work/Playwright_ProjectJS_2024/Playwright_ProjectJS_2024/page_objects/shoppingCartPage.js:27:49)
    at /home/runner/work/Playwright_ProjectJS_2024/Playwright_ProjectJS_2024/tests/testsPOM/shoppingCart.spec.js:47:28
```

# Page snapshot

```yaml
- paragraph: This is a demo store to test your test automaiton scripts. No orders will be fulfilled. If you are facing any issue, email us at hello@softwaretestingboard.com.
- banner:
  - link "Skip to Content"
  - list:
    - listitem:
      - link
    - listitem:
      - link "Sign In"
      - text: or
    - listitem:
      - link "Create an Account"
  - link "store logo"
  - link " My Cart 1 1 items"
  - text:  Search
  - combobox " Search"
  - button "Search" [disabled]:  Search
  - list:
    - listitem
- tablist:
  - tabpanel:
    - navigation:
      - menu:
        - menuitem "What's New"
        - menuitem " Women"
        - menuitem " Men"
        - menuitem " Gear"
        - menuitem " Training"
        - menuitem "Sale"
- main:
  - heading "Shopping Cart" [level=1]
  - strong: Summary
  - tablist:
    - tab "Estimate Shipping and Tax ":
      - heading "Estimate Shipping and Tax" [level=2]
      - text: 
  - table "Total":
    - rowgroup:
      - row "Subtotal $59.00":
        - rowheader "Subtotal"
        - cell "$59.00"
      - row "Tax $0.00":
        - rowheader "Tax"
        - cell "$0.00"
      - row "Order Total $59.00":
        - rowheader "Order Total":
          - strong: Order Total
        - cell "$59.00":
          - strong: $59.00
  - list:
    - listitem:
      - button "Proceed to Checkout"
    - listitem:
      - link "Check Out with Multiple Addresses"
  - table "Shopping Cart Items":
    - caption: Shopping Cart Items
    - rowgroup:
      - row "Item Price Qty Subtotal":
        - columnheader "Item"
        - columnheader "Price"
        - columnheader "Qty"
        - columnheader "Subtotal"
    - rowgroup:
      - 'row "Inez Full Zip Jacket Inez Full Zip Jacket Size: L Color: Orange $59.00 Qty 1 $59.00"':
        - 'cell "Inez Full Zip Jacket Inez Full Zip Jacket Size: L Color: Orange"':
          - link "Inez Full Zip Jacket":
            - img "Inez Full Zip Jacket"
          - strong:
            - link "Inez Full Zip Jacket"
          - term: "Size:"
          - definition: L
          - term: "Color:"
          - definition: Orange
        - cell "$59.00"
        - cell "Qty 1":
          - text: Qty
          - spinbutton "Qty": "1"
        - cell "$59.00"
      - row " Edit  Remove item":
        - cell " Edit  Remove item":
          - link " Edit"
          - link " Remove item"
  - button "Update Shopping Cart"
  - tablist:
    - tab "Apply Discount Code ":
      - heading "Apply Discount Code" [level=2]
      - text: 
  - heading "More Choices:" [level=2]
  - list:
    - listitem:
      - link "Affirm Water Bottle":
        - img "Affirm Water Bottle"
      - strong:
        - link "Affirm Water Bottle"
      - text: "$7.00 Rating:   60%"
      - link "1 Review"
      - button "Add to Cart"
      - button "Add to Wish List":  Add to Wish List
      - button "Add to Compare":  Add to Compare
    - listitem:
      - link "Set of Sprite Yoga Straps":
        - img "Set of Sprite Yoga Straps"
      - strong:
        - link "Set of Sprite Yoga Straps"
      - paragraph: Starting at $14.00
      - button "Add to Cart"
      - button "Add to Wish List":  Add to Wish List
      - button "Add to Compare":  Add to Compare
    - listitem:
      - link "Go-Get'r Pushup Grips":
        - img "Go-Get'r Pushup Grips"
      - strong:
        - link "Go-Get'r Pushup Grips"
      - text: "$19.00 Rating:   87%"
      - link "3 Reviews"
      - button "Add to Cart"
      - button "Add to Wish List":  Add to Wish List
      - button "Add to Compare":  Add to Compare
    - listitem:
      - link "Sprite Foam Roller":
        - img "Sprite Foam Roller"
      - strong:
        - link "Sprite Foam Roller"
      - text: $19.00
      - button "Add to Cart"
      - button "Add to Wish List":  Add to Wish List
      - button "Add to Compare":  Add to Compare
- contentinfo:
  - list:
    - listitem:
      - link "Notes"
    - listitem:
      - link "Practice API Testing using Magento 2"
    - listitem:
      - link "Write for us"
    - listitem:
      - link "Subscribe"
  - list:
    - listitem:
      - link "Search Terms"
    - listitem:
      - link "Privacy and Cookie Policy"
    - listitem:
      - link "Advanced Search"
    - listitem:
      - link "Orders and Returns"
- text: We know you have an assignment to complete. If this site is not functioning as expected, drop us an email. Copyright © 2013-present Magento, Inc. All rights reserved.
```

# Test source

```ts
   1 | import ShippingPage from './shippingPage'
   2 |
   3 | class ShoppingCartPage {
   4 |   /**
   5 |    * Class constructor for BasePage.
   6 |    * @constructor
   7 |    * @param {import('@playwright/test').Page} page - Page passed in the constructor of the Page Object Model.
   8 |    */
   9 |   constructor(page) {
  10 |     this.page = page
  11 |   }
  12 |   locators = {
  13 |     getMoveToWishListLink: () => this.page.getByText('Move to Wishlist'),
  14 |     getAlerMessageAddToWishList: () => this.page.locator(`.page.messages`),
  15 |     getEmptyCartMessage: () => this.page.locator(`div.cart-empty`),
  16 |     getOrderTotalText: () => this.page.getByText('Order Total'),
  17 |     getProceedToCheckoutButton: () => this.page.locator('button[data-role="proceed-to-checkout"].checkout')
  18 |   }
  19 |
  20 |   async clickMoveToWishListLink() {
  21 |     await this.locators.getMoveToWishListLink().click()
  22 |
  23 |     return this
  24 |   }
  25 |
  26 |   async waitForMoveToWishListLink() {
> 27 |     await this.locators.getMoveToWishListLink().waitFor({ state: 'visible' })
     |                                                 ^ Error: locator.waitFor: Test timeout of 60000ms exceeded.
  28 |
  29 |     return this
  30 |   }
  31 |   async waitForOrderTotalText() {
  32 |     await this.locators.getOrderTotalText().waitFor({ state: 'visible' })
  33 |
  34 |     return this
  35 |   }
  36 |
  37 |   async clickProceedToCheckoutButton() {
  38 |     await this.locators.getProceedToCheckoutButton().click()
  39 |
  40 |     return new ShippingPage(this.page)
  41 |   }
  42 | }
  43 | export default ShoppingCartPage
  44 |
```

# Local changes

```diff
diff --git a/.github/pull_request_template.md b/.github/pull_request_template.md
new file mode 100644
index 0000000..d7e1cad
--- /dev/null
+++ b/.github/pull_request_template.md
@@ -0,0 +1,28 @@
+## Proposed changes
+
+[//]: # (Describe the big picture of your changes here to communicate this pull request should be merged.)
+
+## Types of changes
+
+[//]: # (What types of changes does your code introduce to the framwork?)
+[//]: # (_Put an `x` in the boxes that apply_)
+
+- [ ] Polish (an improvement for an existing tests)
+- [ ] Bugfix (non-breaking change which fixes an tests)
+- [ ] New tests added (incresing the test coverage)
+- [ ] Breaking change (fix or feature that would cause existing functionality of the framework)
+- [ ] Documentation update (improvements to the framework docs)
+- [ ] Configuration update (improvements to the framework configuration)
+
+## Checklist
+
+[//]: # (_Put an `x` in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code._)
+
+- [ ] Tests to be added/updated are utilizing the post cleanup hooks
+- [ ] The code to be merged is linted and formatted
+- [ ] I have added the necessary documentation (if appropriate)
+- [ ] I have added proper type definitions for new commands (if appropriate)
+
+## Further comments
+
+[//]: # (If this is a relatively large or complex change, kick off the discussion by explaining why you chose the solution you did and what alternatives you considered, etc...)
diff --git a/.github/workflows/merge-gatekeeper.yml b/.github/workflows/merge-gatekeeper.yml
new file mode 100644
index 0000000..9249be9
--- /dev/null
+++ b/.github/workflows/merge-gatekeeper.yml
@@ -0,0 +1,18 @@
+name: Merge Gatekeeper
+
+on:
+  pull_request:
+    branches:
+      - main
+
+jobs:
+  merge-gatekeeper:
+    runs-on: ubuntu-latest
+    permissions:
+      checks: read
+      statuses: read
+    steps:
+      - name: Run Merge Gatekeeper
+        uses: upsidr/merge-gatekeeper@v1
+        with:
+          token: ${{ secrets.GITHUB_TOKEN }}
\ No newline at end of file
diff --git a/.github/workflows/notification.yml b/.github/workflows/notification.yml
new file mode 100644
index 0000000..6884e33
--- /dev/null
+++ b/.github/workflows/notification.yml
@@ -0,0 +1,21 @@
+name: Notify
+
+on:
+  workflow_run:
+    workflows: ['pages-build-deployment']
+    types:
+      - completed
+
+jobs:
+  notify:
+    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
+    runs-on: ubuntu-latest
+
+    steps:
+      - name: Send Notification
+        uses: evgnick/notify-action@v1
+        with:
+          github-token: ${{ secrets.GITHUB_TOKEN }}
+          telegram-token: ${{ secrets.TELEGRAM_TOKEN }}
+          telegram-chat-id: ''
+          workflow-name: 'CI'
diff --git a/.github/workflows/playwright-shard.yml b/.github/workflows/playwright-shard.yml
index bc0f08f..2e31bdd 100644
--- a/.github/workflows/playwright-shard.yml
+++ b/.github/workflows/playwright-shard.yml
@@ -26,7 +26,7 @@ jobs:
       - uses: act10ns/slack@v2
         with:
           status: starting
-          message: "Starting Playwright tests...${{ matrix.shardIndex }}"
+          message: 'Starting Playwright tests...${{ matrix.shardIndex }}'
           matrix: ${{ toJson(matrix) }}
         if: always()
 
@@ -57,7 +57,7 @@ jobs:
         with:
           path: |
             node_modules
-          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
+          key: ${{ runner.os }}-node-${{ github.sha }}
           restore-keys: |
             ${{ runner.os }}-node-
 
@@ -67,7 +67,7 @@ jobs:
         with:
           path: |
             ~/.cache/ms-playwright
-          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
+          key: ${{ runner.os }}-playwright-${{ github.sha }}
           restore-keys: |
             ${{ runner.os }}-playwright-
 
@@ -78,7 +78,7 @@ jobs:
 
       - name: Install Playwright Browser Chrome
         if: steps.cache-playwright.outputs.cache-hit != 'true'
-        run: npx playwright install --with-deps
+        run: npx playwright install chromium
 
       - name: Run Static analysis
         run: npm run check
@@ -150,4 +150,5 @@ jobs:
       - name: Notify Slack
         if: always()
         run: |
+          npm ci
           node ./helpers/reporter.js
diff --git a/.github/workflows/playwright.txt b/.github/workflows/playwright.yml
similarity index 92%
rename from .github/workflows/playwright.txt
rename to .github/workflows/playwright.yml
index 32723c2..617852a 100644
--- a/.github/workflows/playwright.txt
+++ b/.github/workflows/playwright.yml
@@ -1,7 +1,7 @@
 name: Playwright Tests
 on:
-  pull_request:
-    branches: [main]
+  # pull_request:
+  #   branches: [main]
 
   workflow_dispatch:
 
@@ -38,7 +38,7 @@ jobs:
         with:
           path: |
             node_modules
-          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
+          key: ${{ runner.os }}-node-${{ github.sha }}
           restore-keys: |
             ${{ runner.os }}-node-
 
@@ -48,7 +48,7 @@ jobs:
         with:
           path: |
             ~/.cache/ms-playwright
-          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
+          key: ${{ runner.os }}-playwright-${{ github.sha }}
           restore-keys: |
             ${{ runner.os }}-playwright-
 
diff --git a/.gitignore b/.gitignore
index 119eba7..f9c67e2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,7 +1,6 @@
 /node_modules/
 /test-results/
 /playwright-report/
-/blob-report/
 /playwright/.cache/
 node_modules/
 /report
diff --git a/.prettierignore b/.prettierignore
index 9511a77..70a625c 100644
--- a/.prettierignore
+++ b/.prettierignore
@@ -1,14 +1,6 @@
 node_modules/
 report
-# responses
-# requests
-allure-report
-allure-results
-**/postman_collections
-**/postman_environments
-**/requests
-**/responses
-**/API
 playwright-report
+test-results
 package-lock.json
 Readme.md
\ No newline at end of file
diff --git a/README.md b/README.md
index 753ca21..d94221a 100644
--- a/README.md
+++ b/README.md
@@ -18,6 +18,18 @@
 
 This project is a Playwright-based testing framework for the Magento software testing board.
 
+## Tech Stack
+<p align="center">
+  <img src="https://forthebadge.com/images/badges/made-with-javascript.svg"/>
+</p>
+<p align="center">
+  <img src="https://img.shields.io/badge/RUNS%20WITH%20GITHUB%20ACTIONS-BLUE?style=for-the-badge"/>
+  <img src="https://img.shields.io/badge/RUNS%20ON%20DOCKER%20CONTAINER-BLUE?style=for-the-badge"/>
+  <img src="https://img.shields.io/badge/Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white"/>
+  <img src="https://img.shields.io/badge/Allure-EB5A5A?style=for-the-badge"/>
+  <img src="https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white"/>
+</p>
+
 ## Prerequisites
 
 - Node.js (version 22 or higher)
diff --git a/eslint.config.js b/eslint.config.js
index f6a63b5..5ee7a55 100644
--- a/eslint.config.js
+++ b/eslint.config.js
@@ -1,8 +1,8 @@
-const prettier = require('eslint-config-prettier')
-const playwright = require('eslint-plugin-playwright')
-const globals = require('globals')
+import prettier from 'eslint-config-prettier'
+import playwright from 'eslint-plugin-playwright'
+import globals from 'globals'
 
-module.exports = [
+export default [
   {
     plugins: { prettier, playwright },
     files: ['page_objects/**/*.js', 'tests/**/*.js', 'helpers/**/*.js'],
@@ -12,8 +12,7 @@ module.exports = [
       sourceType: 'module',
       globals: {
         ...globals.node,
-        ...globals.browser,
-        __ENV: 'readonly'
+        ...globals.browser
       }
     },
     rules: {
diff --git a/Dockerfile b/helpers/Dockerfile
similarity index 100%
rename from Dockerfile
rename to helpers/Dockerfile
diff --git a/helpers/testData.js b/helpers/data/testData.js
similarity index 100%
rename from helpers/testData.js
rename to helpers/data/testData.js
diff --git a/helpers/testFusionbackpackData.js b/helpers/data/testFusionbackpackData.js
similarity index 100%
rename from helpers/testFusionbackpackData.js
rename to helpers/data/testFusionbackpackData.js
diff --git a/helpers/testGearBagsData.js b/helpers/data/testGearBagsData.js
similarity index 100%
rename from helpers/testGearBagsData.js
rename to helpers/data/testGearBagsData.js
diff --git a/helpers/testMenData.js b/helpers/data/testMenData.js
similarity index 100%
rename from helpers/testMenData.js
rename to helpers/data/testMenData.js
diff --git a/helpers/testPrivacyPolicyData.js b/helpers/data/testPrivacyPolicyData.js
similarity index 100%
rename from helpers/testPrivacyPolicyData.js
rename to helpers/data/testPrivacyPolicyData.js
diff --git a/helpers/testSaleData.js b/helpers/data/testSaleData.js
similarity index 100%
rename from helpers/testSaleData.js
rename to helpers/data/testSaleData.js
diff --git a/helpers/testWomenData.js b/helpers/data/testWomenData.js
similarity index 100%
rename from helpers/testWomenData.js
rename to helpers/data/testWomenData.js
diff --git a/helpers/reporter.js b/helpers/reporter.js
index 7ad8457..b848d9b 100644
--- a/helpers/reporter.js
+++ b/helpers/reporter.js
@@ -1,8 +1,9 @@
-const fs = require('fs')
-const { createCanvas } = require('canvas')
-const axios = require('axios')
-const FormData = require('form-data')
-const dotenv = require('dotenv')
+import axios from 'axios'
+import { createCanvas } from 'canvas'
+import dotenv from 'dotenv'
+import FormData from 'form-data'
+import fs from 'fs'
+
 dotenv.config()
 function readAllureData() {
   try {
@@ -133,14 +134,14 @@ async function sendSlackNotification(data, imageBuffer, environment = 'test') {
     formData.append(
       'initial_comment',
       `*Test Results for Last run results Allure report on ${environment} environment*\n\n
-        • *Duration:* ${data.durationFormatted} ⏳\n
-        • *Passed:* ✅ ${data.passed}\n
-        • *Failed:* ❌ ${data.failed}\n
-        • *Broken:* 🔨 ${data.broken}\n
-        • *Skipped:* 🚩 ${data.skipped}\n
-        • *Unknown:* ❓ ${data.unknown}\n
-
-        Report available at: https://valiantsin2021.github.io/Playwright_ProjectJS_2024`
+         ⏳ *Duration:* ${data.durationFormatted}\n
+         ✅ *Passed:* ${data.passed}\n
+         ❌ *Failed:* ${data.failed}\n
+         🔨 *Broken:* ${data.broken}\n
+         🚩 *Skipped:* ${data.skipped}\n
+         ❓ *Unknown:* ${data.unknown}\n
+
+        *Report available at:* <https://valiantsin2021.github.io/Playwright_ProjectJS_2024|Report>`
     )
 
     const response = await axios.post('https://slack.com/api/files.upload', formData, {
diff --git a/package.json b/package.json
index e4a48a7..97c4135 100644
--- a/package.json
+++ b/package.json
@@ -3,6 +3,7 @@
   "version": "1.0.0",
   "description": "",
   "main": "index.js",
+  "type": "module",
   "engines": {
     "node": "22"
   },
diff --git a/page_objects/base.js b/page_objects/base.js
index 13528d4..eb1c249 100644
--- a/page_objects/base.js
+++ b/page_objects/base.js
@@ -1,5 +1,5 @@
 import * as base from '@playwright/test'
-import { ADRESS_DATA, USER_DATA } from '../helpers/testData'
+import { ADRESS_DATA, USER_DATA } from '../helpers/data/testData'
 import HomePage from './homePage'
 import MyAccountPage from './myAccountPage'
 /**
diff --git a/page_objects/gearWatchesPage.js b/page_objects/gearWatchesPage.js
index 1767e97..fd0f145 100644
--- a/page_objects/gearWatchesPage.js
+++ b/page_objects/gearWatchesPage.js
@@ -1,4 +1,4 @@
-import { LIST_OF_SHOPPING_OPTIONS_ON_WATCHES_PAGE_LOCATORS } from '../helpers/testData.js'
+import { LIST_OF_SHOPPING_OPTIONS_ON_WATCHES_PAGE_LOCATORS } from '../helpers/data/testData.js'
 import WatchProductPage from '../page_objects/watchProductPage.js'
 
 class GearWatchesPage {
diff --git a/page_objects/jacketsWomenPage.js b/page_objects/jacketsWomenPage.js
index f7d0860..74f2f2a 100644
--- a/page_objects/jacketsWomenPage.js
+++ b/page_objects/jacketsWomenPage.js
@@ -1,4 +1,4 @@
-import { WOMEN_JACKETS_NAME } from '../helpers/testData'
+import { WOMEN_JACKETS_NAME } from '../helpers/data/testData'
 import InezFullZipJacketPage from './inezFullZipJacketPage'
 
 class JacketsWomenPage {
diff --git a/page_objects/menBottomsPage.js b/page_objects/menBottomsPage.js
index da8b3b2..7c37f30 100644
--- a/page_objects/menBottomsPage.js
+++ b/page_objects/menBottomsPage.js
@@ -1,6 +1,6 @@
 import MenPage from './menPage'
 
-import { LIST_CATEGORY_MEN_BOTTOMS, LIST_OF_SUB_CATEGORY_ON_MEN_BOTTOMS_PAGE_LOCATORS } from '../helpers/testData'
+import { LIST_CATEGORY_MEN_BOTTOMS, LIST_OF_SUB_CATEGORY_ON_MEN_BOTTOMS_PAGE_LOCATORS } from '../helpers/data/testData'
 import PierceGymShortPage from './pierceGymShortPage'
 
 class MenBottomsPage {
diff --git a/page_objects/menTopsPage.js b/page_objects/menTopsPage.js
index d9db526..d72bfcb 100644
--- a/page_objects/menTopsPage.js
+++ b/page_objects/menTopsPage.js
@@ -1,5 +1,5 @@
-import { LIST_OF_COUNT_SUB_CATEGORY_ON_MEN_TOPS_PAGE, LIST_OF_SUB_CATEGORY_ON_MEN_TOPS_PAGE_LOCATORS, SHOPPING_OPTIONS_FILTER_VALUE } from '../helpers/testData.js'
-import { MEN_TOPS_PRICE_LIST_LOCATORS } from '../helpers/testMenData.js'
+import { LIST_OF_COUNT_SUB_CATEGORY_ON_MEN_TOPS_PAGE, LIST_OF_SUB_CATEGORY_ON_MEN_TOPS_PAGE_LOCATORS, SHOPPING_OPTIONS_FILTER_VALUE } from '../helpers/data/testData.js'
+import { MEN_TOPS_PRICE_LIST_LOCATORS } from '../helpers/data/testMenData.js'
 import ProductCardPage from '../page_objects/productCardPage.js'
 
 class MenTopsPage {
diff --git a/page_objects/myAccountPage.js b/page_objects/myAccountPage.js
index 7afa18b..a4b5a9c 100644
--- a/page_objects/myAccountPage.js
+++ b/page_objects/myAccountPage.js
@@ -1,4 +1,4 @@
-import { THANKS_MESSAGE } from '../helpers/testData'
+import { THANKS_MESSAGE } from '../helpers/data/testData'
 import EditAccountInformation from './editAccountInformationPage'
 import HomePage from './homePage'
 import MyOrdersPage from './myOrdersPage'
diff --git a/page_objects/searchNoResultsPage.js b/page_objects/searchNoResultsPage.js
index 8dba33f..1ac5398 100644
--- a/page_objects/searchNoResultsPage.js
+++ b/page_objects/searchNoResultsPage.js
@@ -1,4 +1,4 @@
-import { ITEMS, WARNING_MESSAGE_NO_RESULTS } from '../helpers/testData'
+import { ITEMS, WARNING_MESSAGE_NO_RESULTS } from '../helpers/data/testData'
 
 class SearchNoResultsPage {
   /**
diff --git a/page_objects/signInPage.js b/page_objects/signInPage.js
index de70326..851ea0e 100644
--- a/page_objects/signInPage.js
+++ b/page_objects/signInPage.js
@@ -1,4 +1,4 @@
-import { email, EMAIL_WISHLIST, password, PASSWORD_WISHLIST } from '../helpers/testData'
+import { email, EMAIL_WISHLIST, password, PASSWORD_WISHLIST } from '../helpers/data/testData'
 import CreateAccountPage from './createAccountPage'
 import HomePage from './homePage'
 import WishListPage from './wishListPage'
diff --git a/playwright.config.js b/playwright.config.js
index dfef7e0..c55522e 100644
--- a/playwright.config.js
+++ b/playwright.config.js
@@ -1,7 +1,7 @@
 import { defineConfig, devices } from '@playwright/test'
 import 'dotenv/config'
 
-module.exports = defineConfig({
+export default defineConfig({
   testDir: './tests/testsPOM',
   testMatch: '**/*.spec.js',
   fullyParallel: true,
diff --git a/tests/old_tests/bodyBlockPromo.spec.js b/tests/old_tests/bodyBlockPromo.spec.js
deleted file mode 100644
index 611bcfa..0000000
--- a/tests/old_tests/bodyBlockPromo.spec.js
+++ /dev/null
@@ -1,14 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('Body/Block/Promo', () => {
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('Verify navigation to the Performance Fabrics page', async ({ page }) => {
-    await page.locator('.block-promo.home-performance').click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/collections/performance-fabrics.html')
-    await expect.soft(page).toHaveTitle('Performance Fabrics')
-  })
-})
diff --git a/tests/old_tests/cartCheckout.spec.js b/tests/old_tests/cartCheckout.spec.js
deleted file mode 100644
index 27ea1ab..0000000
--- a/tests/old_tests/cartCheckout.spec.js
+++ /dev/null
@@ -1,183 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('US Cart/Checkout', () => {
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('TC 09_2_06 <Cart/Checkout> User able to type in their First Name', async ({ page }) => {
-    await page.getByRole('option', { name: 'XS' }).first().click()
-    await page.getByRole('option', { name: 'Blue' }).first().click()
-    await page.getByRole('button', { name: 'Add to Cart' }).first().click()
-
-    await page.locator('.showcart .counter-number').click()
-    await page.getByRole('button', { name: 'Proceed to Checkout' }).click()
-
-    await page.locator('#shipping-new-address-form div').filter({ hasText: 'First Name' }).click()
-    await page.getByLabel('First Name').fill('Nata')
-    await expect.soft(page.locator('#shipping-new-address-form input[name="firstname"]')).toHaveValue('Nata')
-  })
-
-  test.skip('TC 09.2_07 <Cart/Checkout> User able to type in Last Name', async ({ page }) => {
-    await page.getByRole('option', { name: 'XS' }).first().click()
-    await page.getByRole('option', { name: 'Blue' }).first().click()
-    await page.getByRole('button', { name: 'Add to Cart' }).first().click()
-
-    await page.locator('.showcart .counter-number').click()
-    await page.getByRole('button', { name: 'Proceed to Checkout' }).click()
-
-    await page.locator('#shipping-new-address-form div').filter({ hasText: 'Last Name' }).click()
-    await page.getByLabel('Last Name').fill('Smith')
-
-    await expect.soft(page.locator('#shipping-new-address-form input[name="lastname"]')).toHaveValue('Smith')
-  })
-
-  test('TC 09.2_08 <Cart/Checkout> Company input field is displayed', async ({ page }) => {
-    await page.getByRole('option', { name: 'XS' }).first().click()
-    await page.getByRole('option', { name: 'Blue' }).first().click()
-    await page.getByTitle('Add to Cart').first().click()
-    await page.locator('.showcart .counter-number').click()
-    await page.getByRole('button', { name: 'Proceed to Checkout' }).click()
-
-    await page.locator('#shipping-new-address-form div').filter({ hasText: 'Company' }).click()
-
-    await expect.soft(page.locator('#shipping-new-address-form input[name="company"]')).toBeVisible()
-  })
-
-  test('TC 09.2_01 <Cart/Checkout> Item in Shopping Cart is visible', async ({ page }) => {
-    await page.getByRole('option', { name: 'XS' }).first().click()
-    await page.getByRole('option', { name: 'Blue' }).first().click()
-    await page.getByTitle('Add to Cart').first().click()
-
-    await page.locator('.showcart .counter-number').click()
-    await page.getByRole('link', { name: 'View and Edit Cart' }).click()
-
-    await expect.soft(page.locator('form.form-cart')).toBeVisible()
-  })
-
-  test('TC 09.2_09 <Cart/Checkout> User able to type their Company name', async ({ page }) => {
-    await page.getByRole('option', { name: 'XS' }).first().click()
-    await page.getByRole('option', { name: 'Blue' }).first().click()
-    await page.getByTitle('Add to Cart').first().click()
-    await page.locator('.showcart .counter-number').click()
-    await page.getByRole('button', { name: 'Proceed to Checkout' }).click()
-
-    await page.locator('#shipping-new-address-form div').filter({ hasText: 'Company' }).click()
-
-    await page.locator('#shipping-new-address-form input[name="company"]').click()
-    await page.getByLabel('Company').fill('Flowers')
-    await expect.soft(page.locator('#shipping-new-address-form input[name="company"]')).toHaveValue('Flowers')
-  })
-
-  test(' Verify that "Email Address" input field is displayed', async ({ page }) => {
-    let Item = page.locator('.product-items').getByRole('listitem').nth(2)
-
-    await Item.locator('.product-item-name a').innerText()
-    await Item.getByLabel('M').click()
-    await Item.getByLabel('Gray').click()
-    await Item.getByRole('button').click()
-    await page.locator('.showcart .counter-number').waitFor()
-    await page.locator('.showcart .counter-number').click()
-    await page.locator('#top-cart-btn-checkout').click()
-    await page.getByText('Shipping Address', { exact: true }).waitFor()
-    await expect.soft(page.locator('#customer-email-fieldset div label span').first()).toHaveText('Email Address')
-    await expect.soft(page.locator('#shipping  .step-content #customer-email')).toBeVisible()
-  })
-
-  test('Verify that a User able to type in their email', async ({ page }) => {
-    let HeroHoodieItem = page.getByTitle('Hero Hoodie')
-    let HeroHoodieSize = page.getByText('L', { exact: true })
-    let HeroHoodieColor = page.getByRole('option', { name: 'Green' }, { exact: true })
-    let btnAddToCart = page.getByRole('button', { name: 'Add to Cart' })
-    let counterIcon = page.locator('.showcart .counter-number')
-    let shopCart = page.getByRole('link', { name: 'My cart' })
-    let btnCheckout = page.getByRole('button', { name: 'Proceed to Checkout' })
-    let ShippingAddressText = page.getByText('Shipping Address')
-    let emailField = page.locator('#shipping  .step-content #customer-email')
-
-    await HeroHoodieItem.click()
-    await HeroHoodieSize.click()
-    await HeroHoodieColor.click()
-    await btnAddToCart.click()
-    await counterIcon.waitFor()
-    await shopCart.click()
-    await btnCheckout.click()
-    await ShippingAddressText.waitFor()
-    await emailField.fill('a1@gmail.com')
-
-    await expect.soft(emailField).toHaveValue('a1@gmail.com')
-  })
-
-  test('TC 09.2_05 Verify that User able to click on “Next” button after filling all required input fields', async ({ page }) => {
-    const HeroHoodieItem = page.getByTitle('Hero Hoodie')
-    const HeroHoodieSize = page.getByText('L', { exact: true })
-    const HeroHoodieColor = page.getByRole('option', { name: 'Green' }, { exact: true })
-    const btnAddToCart = page.getByRole('button', { name: 'Add to Cart' })
-    const counterIcon = page.locator('.showcart .counter-number')
-    const shopCart = page.getByRole('link', { name: 'My cart' })
-    const btnCheckout = page.getByRole('button', {
-      name: 'Proceed to Checkout'
-    })
-    const ShippingAddressText = page.getByText('Shipping Address')
-    const emailField = page.locator('#shipping  .step-content #customer-email')
-    const FirstNameField = page.locator(".control [name='firstname']")
-    const LastNameField = page.locator(".control [name='lastname']")
-    const StreetAddressField = page.locator(".control [name='street[0]']")
-    const CityField = page.locator(".control [name='city']")
-    const StateProvinceField = page.locator(".control [name='region_id']")
-    const PostalCodeField = page.locator(".control [name='postcode']")
-    const CountryField = page.locator(".control [name='country_id']")
-    const PhoneNumberField = page.locator(".control [name='telephone']")
-    const ShippingMethodsRadioBtn = page.locator(".row [type='radio'][name='ko_unique_1']")
-    const btnNext = page.getByRole('button', { name: 'Next' })
-    const PaymentMethodText = page.locator('.payment-group .step-title')
-
-    await HeroHoodieItem.click()
-    await HeroHoodieSize.click()
-    await HeroHoodieColor.click()
-    await btnAddToCart.click()
-    await counterIcon.waitFor()
-    await shopCart.click()
-    await btnCheckout.click()
-    await ShippingAddressText.waitFor()
-    await emailField.fill('annaS@gmail.com')
-    await FirstNameField.fill('Anna')
-    await LastNameField.fill('Ivanova')
-    await StreetAddressField.fill('Vashington 20')
-    await CityField.fill('Chicago')
-    await StateProvinceField.selectOption('Illinois')
-    await PostalCodeField.fill('C123')
-    await CountryField.selectOption('United States')
-    await PhoneNumberField.fill('134569087')
-    await ShippingMethodsRadioBtn.click()
-    await btnNext.click()
-    await PaymentMethodText.waitFor()
-
-    await expect.soft(PaymentMethodText).toBeVisible()
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/checkout/#payment')
-  })
-
-  test('Verify that User able to click on “Next” button', async ({ page }) => {
-    await page.getByRole('option', { name: 'XS' }).first().click()
-    await page.getByRole('option', { name: 'Purple' }).first().click()
-    await page.getByTitle('Add to Cart').first().click()
-    await page.locator('.showcart .counter-number').click()
-    page.getByRole('button', { name: 'Proceed to Checkout' }).click()
-    await page.getByText('Shipping Address', { exact: true }).waitFor()
-    await page.locator('.checkout-shipping-address #customer-email').fill('john_smith@gmail.com')
-    await page.locator('.control input[name="firstname"]').fill('John')
-    await page.locator('.control input[name="lastname"]').fill('Smith')
-    await page.locator('.control input[name="company"]').fill('Flowers World')
-    await page.locator('.control input[name="street[0]"]').fill('9200 Flowers street')
-    await page.locator('.control input[name="city"]').fill('New York')
-    await page.locator('.control select[name="region_id"]').selectOption('New York')
-    await page.locator('.control input[name="postcode"]').fill('12345')
-    await page.locator('.control select[name="country_id"]').selectOption('United States')
-    await page.locator('.control input[name="telephone"]').fill('123456789')
-    await page.locator('.row input').first().check()
-    await page.locator('.button.action').click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/checkout/#payment')
-    await expect.soft(page.locator('.payment-methods .step-title')).toHaveText('Payment Method')
-  })
-})
diff --git a/tests/old_tests/createNewCustomer.spec.js b/tests/old_tests/createNewCustomer.spec.js
deleted file mode 100644
index 41c54a8..0000000
--- a/tests/old_tests/createNewCustomer.spec.js
+++ /dev/null
@@ -1,33 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('Create New Customer page', () => {
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('Verify Create New Customer Account page presents an empty forms for Personal Information and Sign-in Information', async ({ page }) => {
-    await page.getByRole('link', { name: 'Create an Account' }).click()
-
-    await expect.soft(page.locator('#firstname')).toBeEmpty()
-    await expect.soft(page.locator('#lastname')).toBeEmpty()
-    await expect.soft(page.locator('#email_address')).toBeEmpty()
-    await expect.soft(page.locator('.field.password.required .control #password')).toBeEmpty()
-    await expect.soft(page.locator('#password-confirmation')).toBeVisible()
-  })
-
-  test.skip('Verify if the Password and Confirm Password do not match "Please enter the same value again." an error message is displayed', async ({ page }) => {
-    await page.getByRole('link', { name: 'Create an Account' }).click()
-
-    await page.locator('.field.password.required .control #password').fill('Test2024')
-    await page.locator('#password-confirmation').fill('Test2025')
-    await page.getByRole('button', { name: 'Create an Account' }).click()
-
-    await expect.soft(page.locator('#password-confirmation-error')).toHaveText('Please enter the same value again.')
-  })
-
-  test('Verify after clicking the "Create an Account" link redirects the user to the Create New Customer Account page', async ({ page }) => {
-    await page.getByRole('link', { name: 'Create an Account' }).click()
-
-    await expect.soft(page.locator('.base')).toHaveText('Create New Customer Account')
-  })
-})
diff --git a/tests/old_tests/customerAccount.spec.js b/tests/old_tests/customerAccount.spec.js
deleted file mode 100644
index 9564b79..0000000
--- a/tests/old_tests/customerAccount.spec.js
+++ /dev/null
@@ -1,121 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('customerAccount', () => {
-  function generateRandomEmail() {
-    const mailbox = Math.random().toString(36).substring(2, 10)
-    const domain = 'example.com'
-    return `${mailbox}@${domain}`
-  }
-  const BASE_URL = 'https://magento.softwaretestingboard.com'
-
-  test.beforeEach(async ({ page }) => {
-    const firstname = 'Angelina-Maria'
-    const lastname = "O'Neel"
-    const email = generateRandomEmail()
-    const password = 'RT45bb%%mm'
-
-    await page.goto('/')
-    await page.getByRole('link', { name: 'Create an Account' }).click()
-    await page.getByRole('textbox', { name: 'First Name*' }).fill(firstname)
-    await page.getByRole('textbox', { name: 'Last Name*' }).fill(lastname)
-    await page.getByRole('textbox', { name: 'Email*' }).fill(email)
-    await page.getByRole('textbox', { name: 'Password*', exact: true }).fill(password)
-    await page.getByRole('textbox', { name: 'Confirm Password*' }).fill(password)
-    await page.getByRole('button', { name: 'Create an Account' }).click()
-    await page.getByRole('link', { name: 'store logo' }).click()
-  })
-
-  test('Customer name is displaied on the home page', async ({ page }) => {
-    const greetingMSG = page.getByRole('banner').getByText("Welcome, Angelina-Maria O'Neel!")
-
-    await expect.soft(greetingMSG).toBeVisible()
-    await expect.soft(greetingMSG).toHaveText("Welcome, Angelina-Maria O'Neel!")
-  })
-
-  test("Verify that clicking on the 'Welcome, username' inscription opens the menu", async ({ page }) => {
-    await page.locator("div[class='panel header'] span[role='button']").click()
-
-    await expect.soft(page.locator("div[aria-hidden='false'] ul[class='header links']")).toBeVisible()
-  })
-
-  test("Verify that clicking on the 'My Account' section name in the menu redirects to the 'My Account' page", async ({ page }) => {
-    await page.locator("div[class='panel header'] span[role='button']").click()
-    await page.getByRole('link', { name: 'My Account' }).click()
-
-    await expect.soft(page).toHaveURL(BASE_URL + '/customer/account/')
-
-    const myAccountPageHeader = page.getByRole('heading', { name: 'My Account' })
-    await expect.soft(myAccountPageHeader).toBeVisible()
-    await expect.soft(myAccountPageHeader).toHaveText('My Account')
-  })
-
-  test('TC 11.6.1_01 | Veryfy that user name is changed', async ({ page }) => {
-    const oldUser = {
-      firstName: 'Angelina-Maria',
-      lastName: "O'Neel"
-    }
-
-    const newUser = {
-      firstName: 'Bob',
-      lastName: 'Tester'
-    }
-    const oldNameInGreetingLocator = page.getByRole('banner').getByText("Welcome, Angelina-Maria O'Neel!")
-    const welcomeDropdown = page.locator('[class="panel header"] [role="button"]')
-    const myAccountLink = page.getByRole('link', { name: 'My Account' })
-    const editLink = page.getByRole('link', { name: 'Edit', exact: true })
-    const firstNameInputField = page.getByRole('textbox', { name: 'First Name' })
-    const lastNameInputField = page.getByRole('textbox', { name: 'Last Name' })
-    const saveBtn = page.getByRole('button', { name: 'Save' })
-    const nameInContactInformationLocator = page.locator('[class="column main"] div:nth-child(5) [class="box-content"] p')
-    const nameInHeaderGreetingLocator = page.getByRole('banner').getByText('Welcome, Bob Tester!')
-
-    expect.soft(await oldNameInGreetingLocator.innerText()).toEqual(`Welcome, ${oldUser.firstName} ${oldUser.lastName}!`)
-    await welcomeDropdown.click()
-    await myAccountLink.click()
-    await editLink.click()
-    await firstNameInputField.fill(newUser.firstName)
-    await lastNameInputField.fill(newUser.lastName)
-    await saveBtn.click()
-    const contactInformationArray = (await nameInContactInformationLocator.innerText()).split('\n')
-    const nameInContactInformation = contactInformationArray[0]
-    await nameInHeaderGreetingLocator.waitFor()
-    const nameInHeaderGreeting = await nameInHeaderGreetingLocator.innerText()
-
-    expect.soft(nameInContactInformation).toEqual(newUser.firstName + ' ' + newUser.lastName)
-    expect.soft(nameInHeaderGreeting).toContain(`Welcome, ${newUser.firstName} ${newUser.lastName}!`)
-  })
-
-  test('TC 11.6.1_02 | Change email and password and verify the User can sign in', async ({ page }) => {
-    const newUserData = {
-      newEmail: generateRandomEmail(),
-      oldPassword: 'RT45bb%%mm',
-      newPassword: 'Bob_Tester'
-    }
-    const alertMessage = 'You saved the account information.'
-    const alertLocator = page.getByRole('alert').getByText('You saved the account information.')
-    const nameInContactInformationLocator = page.locator('[class="column main"] div:nth-child(5) [class="box-content"] p')
-
-    await page.locator('[class="panel header"] [role="button"]').click()
-    await page.getByRole('link', { name: 'My Account' }).click()
-    await page.locator('[class="nav items"] li:nth-child(7)').click()
-    await page.getByRole('checkbox', { name: 'Change Email' }).check()
-    await page.getByRole('checkbox', { name: 'Change Password' }).check()
-    await page.getByRole('textbox', { name: 'Email' }).fill(newUserData.newEmail)
-    await page.getByRole('textbox', { name: 'Current Password' }).fill(newUserData.oldPassword)
-    await page.getByRole('textbox', { name: 'New Password' }).nth(0).fill(newUserData.newPassword)
-    await page.getByRole('textbox', { name: 'Confirm New Password' }).fill(newUserData.newPassword)
-    await page.getByRole('button', { name: 'Save' }).click()
-    await alertLocator.waitFor()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/customer/account/login/')
-    await expect.soft(alertLocator).toHaveText(alertMessage)
-
-    await page.getByRole('textbox', { name: 'Email' }).fill(newUserData.newEmail)
-    await page.getByRole('textbox', { name: 'Password' }).fill(newUserData.newPassword)
-    await page.getByRole('button', { name: 'Sign in' }).click()
-    await nameInContactInformationLocator.waitFor()
-    const emailInContactInformation = (await nameInContactInformationLocator.innerText()).split('\n')[1]
-
-    expect.soft(emailInContactInformation).toEqual(newUserData.newEmail)
-  })
-})
diff --git a/tests/old_tests/fitnessEquipmentPage.spec.js b/tests/old_tests/fitnessEquipmentPage.spec.js
deleted file mode 100644
index 1e52174..0000000
--- a/tests/old_tests/fitnessEquipmentPage.spec.js
+++ /dev/null
@@ -1,30 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('verify fitness equipment', () => {
-  test('verify navigation path to the fitness equipment', async ({ page }) => {
-    await page.goto('/')
-
-    if (await page.getByRole('dialog', { name: 'This site asks for consent to use your data' }).isVisible()) {
-      await page.getByRole('button', { name: 'Consent' }).click()
-    }
-
-    await page.locator('a > span:text-is("Gear")').hover()
-    await page.locator('ul > li > a> span:text-is("Fitness Equipment")').click()
-    await expect.soft(page.locator('ul.items')).toHaveText('Home Gear Fitness Equipment')
-  })
-
-  test('change display mode in the Fitnes Equipment section', async ({ page }) => {
-    await page.goto('/' + 'gear/fitness-equipment.html')
-
-    if (await page.getByRole('dialog', { name: 'This site asks for consent to use your data' }).isVisible()) {
-      await page.getByRole('button', { name: 'Consent' }).click()
-    }
-
-    await page.locator('#mode-list').first().click()
-    await expect.soft(page.locator('.toolbar-amount').nth(1)).toHaveText('Items 1-10 of 11')
-    await page.reload()
-
-    await page.locator('#mode-grid').first().click()
-    await expect.soft(page.locator('.toolbar-amount').nth(1)).toHaveText('11 Items')
-  })
-})
diff --git a/tests/old_tests/footer.spec.js b/tests/old_tests/footer.spec.js
deleted file mode 100644
index c31b1d1..0000000
--- a/tests/old_tests/footer.spec.js
+++ /dev/null
@@ -1,100 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('footer', () => {
-  const NOTES_URL = 'https://softwaretestingboard.com/magento-store-notes/?utm_source=magento_store&utm_medium=banner&utm_campaign=notes_promo&utm_id=notes_promotion'
-  const POLICY_URL = 'https://magento.softwaretestingboard.com/privacy-policy-cookie-restriction-mode'
-  const SEARCH_TERMS_URL = 'https://magento.softwaretestingboard.com/search/term/popular/'
-  const footerLinks = ['Notes', 'Search Terms', 'Privacy and Cookie Policy', 'Advanced Search', 'Orders and Returns']
-
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-    if (await page.getByRole('dialog', { name: 'This site asks for consent to use your data' }).isVisible()) {
-      await page.getByRole('button', { name: 'Consent' }).click()
-    }
-  })
-
-  async function clickSearchTerms(page) {
-    await page.getByText('Search Terms').click()
-  }
-
-  test('user is redirected to Notes page', async ({ page }) => {
-    const pagePromise = page.waitForEvent('popup')
-
-    await page.getByRole('link', { name: 'Notes' }).click()
-    const pageNotes = await pagePromise
-
-    await expect.soft(pageNotes).toHaveURL(NOTES_URL)
-  })
-
-  test('user is redirected to Privacy Policy page', async ({ page }) => {
-    await page.getByRole('link', { name: 'Privacy and Cookie Policy' }).click()
-
-    await expect.soft(page).toHaveURL(POLICY_URL)
-  })
-
-  test('verify visibility of footer', async ({ page }) => {
-    await expect.soft(page.locator('.page-wrapper footer')).toBeVisible()
-  })
-
-  test('Verify visibility of five links in footer', async ({ page }) => {
-    for (const linkText of footerLinks) {
-      const linkLocator = page.locator(`.page-wrapper footer li:has-text("${linkText}")`)
-      await expect.soft(linkLocator).toBeVisible()
-    }
-  })
-
-  test('link contact us is visible and clickable', async ({ page }) => {
-    await page.goto(POLICY_URL)
-    const contactUs = page.getByRole('link', { name: 'Contact Us' })
-
-    await expect.soft(contactUs).toBeVisible()
-    await contactUs.click()
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/contact/')
-  })
-
-  test('Checking the link Privacy Policy', async ({ page }) => {
-    //  await page.goto("/")
-    await expect.soft(page.getByRole('link', { name: 'Privacy and Cookie Policy' })).toBeVisible()
-    await page.getByRole('link', { name: 'Privacy and Cookie Policy' }).click()
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/privacy-policy-cookie-restriction-mode')
-  })
-
-  test('Verify that the color of the links is blue', async ({ page }) => {
-    await page.getByRole('link', { name: 'Search Terms' }).click()
-
-    const searchTermsLocators = await page.locator('ul.search-terms .item a').all()
-
-    for (const link of searchTermsLocators) {
-      // rgb(0, 107, 180) == HEX #006bb4
-      await expect.soft(link).toHaveCSS('color', 'rgb(0, 107, 180)')
-    }
-  })
-
-  test('Link "Advanced Search" is clickable and redirectable', async ({ page }) => {
-    await page.getByRole('link', { name: 'Advanced Search' }).click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/catalogsearch/advanced/')
-    await expect.soft(page.getByRole('heading', { name: 'Advanced Search' })).toBeVisible()
-  })
-
-  test('Verify that "Search terms" link redirects to the "Popular Search Terms" page', async ({ page }) => {
-    clickSearchTerms(page)
-    await expect.soft(page).toHaveURL(SEARCH_TERMS_URL)
-
-    const navigationMenuItems = page.getByRole('navigation').getByRole('listitem')
-
-    for (const item of await navigationMenuItems.all()) {
-      await item.click()
-      clickSearchTerms(page)
-      await expect.soft(page).toHaveURL(SEARCH_TERMS_URL)
-      expect.soft(page).toHaveTitle('Popular Search Terms')
-    }
-  })
-
-  test('the “Search” terms link is clickable ', async ({ page }) => {
-    await page.locator('a[href="https://magento.softwaretestingboard.com/search/term/popular/"]').click()
-
-    await page.waitForURL('**/search/term/popular/')
-    await expect.soft(page.getByRole('heading', { name: 'Popular Search Terms' })).toBeVisible()
-  })
-})
diff --git a/tests/old_tests/footer_LoggedInUser.spec.js b/tests/old_tests/footer_LoggedInUser.spec.js
deleted file mode 100644
index eb9fe94..0000000
--- a/tests/old_tests/footer_LoggedInUser.spec.js
+++ /dev/null
@@ -1,46 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('footer for logged-in user', () => {
-  const footerLinksForLoggedInUser = ['Notes', 'Search Terms', 'Privacy and Cookie Policy', 'Advanced Search']
-  const notesURLForLoggedInUser = 'https://softwaretestingboard.com/magento-store-notes/?utm_source=magento_store&utm_medium=banner&utm_campaign=notes_promo&utm_id=notes_promotion'
-  const searchTermsURLforLoggedInUser = 'https://magento.softwaretestingboard.com/search/term/popular/'
-  const privacyURLforLoggedInUser = 'https://magento.softwaretestingboard.com/privacy-policy-cookie-restriction-mode'
-  const advancedSearchURLforLoggedInUser = 'https://magento.softwaretestingboard.com/catalogsearch/advanced/'
-
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-
-    const signInButtonOnHeader = page.locator('.links .authorization-link>a').first()
-
-    await signInButtonOnHeader.click()
-    await expect.soft(page.locator('h1')).toHaveText('Customer Login')
-
-    await page.getByRole('textbox', { name: 'Email' }).fill('sokolovasviatlana@gmail.com')
-    await page.getByRole('textbox', { name: 'Password' }).fill('April2024')
-    await page.getByRole('button', { name: 'Sign In' }).click()
-  })
-
-  test('TC 02.5.3_03 | Verify links visibility in the footer for logged-in user', async ({ page }) => {
-    for (const footerLinkText of footerLinksForLoggedInUser) {
-      const footerLinkLocator = page.locator(`.page-wrapper footer li:has-text("${footerLinkText}")`)
-      await expect.soft(footerLinkLocator).toBeVisible()
-    }
-  })
-
-  test('TC 02.5.3_04 | Verify footer links redirect logged-in user to the required page', async ({ page }) => {
-    await page.getByRole('link', { name: 'Search Terms' }).click()
-    await expect.soft(page).toHaveURL(searchTermsURLforLoggedInUser)
-
-    await page.getByRole('link', { name: 'Privacy and Cookie Policy' }).click()
-    await expect.soft(page).toHaveURL(privacyURLforLoggedInUser)
-
-    await page.getByRole('link', { name: 'Advanced Search' }).click()
-    await expect.soft(page).toHaveURL(advancedSearchURLforLoggedInUser)
-
-    const pagePromise = page.waitForEvent('popup')
-    await page.getByRole('link', { name: 'Notes' }).click()
-    const pageNotesForLoggedInUser = await pagePromise
-
-    await expect.soft(pageNotesForLoggedInUser).toHaveURL(notesURLForLoggedInUser)
-  })
-})
diff --git a/tests/old_tests/forgotPassword.spec.js b/tests/old_tests/forgotPassword.spec.js
deleted file mode 100644
index 1abeac5..0000000
--- a/tests/old_tests/forgotPassword.spec.js
+++ /dev/null
@@ -1,58 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('Forgot Password Page', () => {
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('Verify the Forgot Your Password link redirects to the Forgot Your Password page', async ({ page }) => {
-    await page.getByRole('link', { name: 'Sign In' }).click()
-    await page.getByRole('link', { name: 'Forgot Your Password?' }).click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/customer/account/forgotpassword/')
-    await expect.soft(page.locator('h1.page-title')).toBeVisible()
-  })
-
-  test.skip('The error message appears below the Email field after entering the incorrect email', async ({ page }) => {
-    await page.getByRole('link', { name: 'Sign In' }).click()
-    await page.getByRole('link', { name: 'Forgot Your Password?' }).click()
-    await page.locator('#email_address').fill('qee@c')
-    await page.locator('.action.submit.primary').click()
-
-    await expect.soft(page.locator('#email_address-error')).toHaveText('Please enter a valid email address (Ex: johndoe@domain.com).')
-  })
-  test('If there is an account associated with … (here your email)... displays if the user enters valid data', async ({ page }) => {
-    function generateRandomEmail() {
-      const mailbox = Math.random().toString(36).substring(2, 10)
-      const domain = 'example.com'
-      return `${mailbox}@${domain}`
-    }
-
-    const email = generateRandomEmail()
-    await page.getByRole('link', { name: 'Sign In' }).click()
-    await page.getByRole('link', { name: 'Forgot Your Password?' }).click()
-    await page.locator('#email_address').fill(email)
-    await page.locator('.action.submit.primary').click()
-
-    await expect.soft(page.getByRole('alert').first()).toHaveText(`If there is an account associated with ${email} you will receive an email with a link to reset your password.`)
-  })
-
-  test('After entering a valid email to the Email field and clicking the Reset My Password button the Customer Login page opens', async ({ page }) => {
-    function generateRandomEmail() {
-      const mailbox = Math.random().toString(36).substring(2, 10)
-      const domain = 'example.com'
-      return `${mailbox}@${domain}`
-    }
-
-    const email = generateRandomEmail()
-    await page.getByRole('link', { name: 'Sign In' }).click()
-    await page.getByRole('link', { name: 'Forgot Your Password?' }).click()
-    await page.locator('#email_address').fill(email)
-    await page.locator('.action.submit.primary').click()
-
-    await expect
-      .soft(page)
-      .toHaveURL('https://magento.softwaretestingboard.com/customer/account/login/referer/aHR0cHM6Ly9tYWdlbnRvLnNvZnR3YXJldGVzdGluZ2JvYXJkLmNvbS9jdXN0b21lci9hY2NvdW50L2luZGV4Lw%2C%2C/')
-    await expect.soft(page.locator('h1.page-title')).toHaveText('Customer Login')
-  })
-})
diff --git a/tests/old_tests/gearBags.spec.js b/tests/old_tests/gearBags.spec.js
deleted file mode 100644
index e485af5..0000000
--- a/tests/old_tests/gearBags.spec.js
+++ /dev/null
@@ -1,110 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('gearBags', () => {
-  let materialOption
-  const materialOptionNames = ['Burlap', 'Canvas', 'Cotton', 'Leather', 'Mesh', 'Nylon', 'Polyester', 'Rayon', 'Suede']
-
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-    page.getByRole('menuitem', { name: 'Gear' }).hover()
-    await page.getByRole('menuitem').filter({ hasText: 'Bags' }).click()
-    materialOption = page.locator('text=Material')
-  })
-
-  test('Verify material sidebar menu option exists', async ({ page }) => {
-    await expect.soft(page).toHaveTitle('Bags - Gear')
-
-    await expect.soft(materialOption).toBeVisible()
-  })
-
-  test('Verify user can choose a bag by material', async ({ page }) => {
-    await expect.soft(page).toHaveTitle('Bags - Gear')
-    await materialOption.click()
-    const materialMenu = await page.locator(
-      "ol.items > li.item > a:has-text(' Polyester ')",
-      { timeout: 50000 } // Increase timeout value as needed
-    )
-    materialMenu.click()
-    await expect.soft(page.locator('.filter-value:has-text("Polyester")')).toBeVisible()
-  })
-
-  materialOptionNames.forEach(name => {
-    test(`Verify that ${name} from material options list is visible and has right name`, async ({ page }) => {
-      await page.getByRole('tab', { name: 'Material' }).click()
-      const materialItemLocator = page.getByRole('link', { name: `${name}` })
-      const materialItemText = (await materialItemLocator.innerText()).split(' ')[0]
-
-      expect(materialItemLocator).toBeVisible
-      expect.soft(materialItemText).toEqual(name)
-    })
-  })
-  test('Verify user can choose a bag by material leather', async ({ page }) => {
-    await page.getByText('Gear', { exact: true }).nth(1).click()
-    await expect.soft(page).toHaveTitle('Gear')
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/gear.html')
-    page.locator('#ui-id-6').hover()
-    await page.locator('#ui-id-25').click()
-    await page.getByText('Material', { exact: true }).click()
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/gear/bags.html')
-    await page.getByRole('listitem').locator('li').filter({ hasText: ' Leather ' })
-    await expect.soft(page.locator('#toolbar-amount')).toHaveCount(2)
-  })
-
-  test.skip('Verify user can switch between materials', async ({ page }) => {
-    await page.hover('#ui-id-6')
-    await page.click('#ui-id-25')
-
-    await expect.soft(page).toHaveTitle('Bags - Gear')
-
-    await materialOption.click()
-    await expect.soft(page.locator("ol.items > li.item > a:has-text(' Polyester ')")).toBeVisible()
-
-    const selectedOptions = ['Polyester', 'Leather', 'Mesh']
-
-    for (const optionName of selectedOptions) {
-      const selector = `a:has-text('${optionName}')`
-      await page.click(selector)
-      await page.waitForSelector(`text=${optionName}`, { state: 'visible' })
-
-      await page.waitForSelector(`a[title="Remove Material ${optionName}"]`, {
-        state: 'visible'
-      })
-
-      await page.click(`a[title="Remove Material ${optionName}"]`)
-
-      await page.waitForSelector(`text=${optionName}`, { state: 'hidden' })
-
-      await page.waitForSelector('text=Material')
-      await page.click('text=Material')
-    }
-  })
-
-  test('Apply filter "Leather" and verify that each bag has selected material in the description', async ({ page }) => {
-    await page.getByRole('tab', { name: 'Material' }).click()
-    await page.getByRole('link', { name: 'Leather' }).click()
-    const productItemList = page.getByRole('img')
-    const numberOfItems = await productItemList.count()
-
-    for (let i = 0; i < numberOfItems; i++) {
-      await productItemList.nth(i).click()
-      await page.getByRole('link', { name: 'More Information' }).click()
-      const materialItemInformation = await page.locator('tbody tr td').nth(2).innerText()
-
-      expect.soft(materialItemInformation.split(',')[0]).toEqual('Leather')
-      await page.goto('https://magento.softwaretestingboard.com/gear/bags.html?material=35')
-    }
-  })
-  test('Verify bags display mode', async ({ page }) => {
-    test.setTimeout(60 * 1000)
-    await page.locator('#ui-id-6').hover()
-    await page.locator('#ui-id-25').click()
-    await expect.soft(page).toHaveURL('/gear/bags.html')
-    await expect.soft(page).toHaveTitle('Bags - Gear')
-
-    await page.getByRole('link', { name: 'View as  List' }).click()
-
-    await expect.soft(page).toHaveURL('/gear/bags.html?product_list_mode=list')
-    await expect.soft(page.locator('//select[@id="limiter"]//option[2]').last()).toHaveAttribute('selected')
-    await expect.soft(page.locator('div.toolbar-products [title="List"]').first()).toHaveAttribute('class', 'modes-mode active mode-list')
-  })
-})
diff --git a/tests/old_tests/gearFitnessEquipment.spec.js b/tests/old_tests/gearFitnessEquipment.spec.js
deleted file mode 100644
index 3233c1d..0000000
--- a/tests/old_tests/gearFitnessEquipment.spec.js
+++ /dev/null
@@ -1,44 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('page gear', () => {
-  const FITNESS_ITEMS = [
-    'Sprite Yoga Companion Kit',
-    'Set of Sprite Yoga Straps',
-    'Harmony Lumaflex™ Strength Band Kit',
-    'Sprite Foam Roller',
-    'Sprite Foam Yoga Brick',
-    'Quest Lumaflex™ Band',
-    "Go-Get'r Pushup Grips",
-    'Pursuit Lumaflex™ Tone Band',
-    'Zing Jump Rope',
-    'Dual Handle Cardio Ball',
-    'Affirm Water Bottle'
-  ]
-
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('should navigate to fitness equipment page', async ({ page }) => {
-    const gearPageURL = 'https://magento.softwaretestingboard.com/gear.html'
-
-    await page.goto(gearPageURL)
-    await expect.soft(page).toHaveURL(gearPageURL)
-
-    await page.locator('#narrow-by-list2 > dd > ol > li:nth-child(2) > a').click()
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/gear/fitness-equipment.html')
-  })
-
-  test('verify that on the Fitness Equipment page user sees fitness equipment', async ({ page }) => {
-    await page.getByRole('menuitem', { name: 'Gear' }).hover()
-    await page.locator('#ui-id-26').click()
-
-    const allFitnessItems = await page.locator('.products .product-items .product-item-link').allTextContents()
-
-    expect.soft(allFitnessItems.length).toBeGreaterThan(0)
-
-    const allItemsContainExpectedText = allFitnessItems.every(item => FITNESS_ITEMS.some(keyword => item.includes(keyword)))
-
-    expect.soft(allItemsContainExpectedText).toBeTruthy()
-  })
-})
diff --git a/tests/old_tests/gearPage.spec.js b/tests/old_tests/gearPage.spec.js
deleted file mode 100644
index 2a6217a..0000000
--- a/tests/old_tests/gearPage.spec.js
+++ /dev/null
@@ -1,74 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('gearPage', () => {
-  const BAGS_URL = 'https://magento.softwaretestingboard.com/gear/bags.html'
-  const GEAR_url = 'https://magento.softwaretestingboard.com/gear.html'
-  const WATCHES_URL = 'https://magento.softwaretestingboard.com/gear/watches.html'
-
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('validate Gear/Bags page', async ({ page }) => {
-    const bagsButton = page.locator('#ui-id-25')
-
-    await page.getByRole('menuitem', { name: 'Gear' }).hover()
-    await expect.soft(bagsButton).toBeVisible()
-    await expect.soft(bagsButton).toHaveText('Bags')
-
-    await bagsButton.click()
-    await expect.soft(page).toHaveURL(BAGS_URL)
-    await expect.soft(page.locator('ol.products.list.items.product-items')).toBeVisible()
-  })
-
-  test('TC 07.1.1_02 <Gear/Bags> Verify redirection to the Bags Page via HoverOver Gear -> Bags', async ({ page }) => {
-    await page.locator('#ui-id-6').hover()
-    await page.getByRole('menuitem', { name: 'Bags' }).click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/gear/bags.html')
-    await expect.soft(page).toHaveTitle('Bags - Gear')
-    await expect.soft(page.getByRole('heading', { name: 'Bags' })).toBeVisible()
-  })
-
-  test('Check that filter Shop by category has 3 links', async ({ page }) => {
-    const GEAR_url = 'https://magento.softwaretestingboard.com/gear.html'
-    const GearLinks = page.getByText('Bags & Fitness Equipment & Watches')
-
-    await page.goto(GEAR_url)
-    await page.getByText('Shop By')
-    await page.getByTitle('Category')
-
-    await expect(page.getByText('Shop By')).toBeVisible
-    await expect(page.getByTitle('Category')).toBeVisible
-    await expect(GearLinks).toBeVisible
-  })
-
-  test('Check that link BAGS redirects to BAGS page', async ({ page }) => {
-    await page.goto(GEAR_url)
-    await page.locator('#narrow-by-list2').getByRole('link', { name: 'Bags' }).click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/gear/bags.html')
-  })
-
-  test('Category links display count of items', async ({ page }) => {
-    await page.goto(GEAR_url)
-    await page.locator('.count').getByText([14, 11, 9])
-
-    await expect.soft(page.locator('.count').getByText([14, 11, 9])).toBeTruthy()
-  })
-
-  test('Verify that the link Watches redirects to the Watches page', async ({ page }) => {
-    await page.locator('#ui-id-6').click()
-    await page.locator('#narrow-by-list2').getByRole('link', { name: 'Watches' }).click()
-
-    await expect.soft(page).toHaveURL(WATCHES_URL)
-  })
-
-  test('Verify that user can navigate to Bags page from the Gear menu', async ({ page }) => {
-    await page.getByRole('menuitem', { name: 'Gear' }).hover()
-    await page.locator('#ui-id-25').click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/gear/bags.html')
-    await expect.soft(page).toHaveTitle('Bags - Gear')
-  })
-})
diff --git a/tests/old_tests/gearWatchesShoppingOptionsNew.spec.js b/tests/old_tests/gearWatchesShoppingOptionsNew.spec.js
deleted file mode 100644
index 4fb87f2..0000000
--- a/tests/old_tests/gearWatchesShoppingOptionsNew.spec.js
+++ /dev/null
@@ -1,32 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('gearWatchesShoppingOptionsNew', () => {
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('Apply filter "New"', async ({ page }) => {
-    await page.locator('#ui-id-6').hover()
-    await page.locator('#ui-id-27').click()
-    await page.getByRole('tab', { name: 'New' }).click()
-    const itemsNew = await page.locator('a[href *= "/watches.html?new=1"]>span.count').allTextContents()
-    const nItem = parseInt(itemsNew[0].slice(-6))
-    await page.getByRole('link', { name: 'Yes' }).click()
-    const itemsAll = await page.locator('li[class="item product product-item"]', { state: 'attached' }).count()
-
-    expect.soft(nItem).toBe(itemsAll)
-  })
-
-  test('reset filter "new"', async ({ page }) => {
-    await page.locator('#ui-id-6').hover()
-    await page.locator('#ui-id-27').click()
-    await page.getByRole('tab', { name: 'New' }).click()
-    await page.getByRole('link', { name: 'Yes' }).click()
-
-    await expect.soft(page).toHaveURL(/new/)
-
-    await page.getByRole('link', { name: 'Clear All' }).click()
-
-    await expect.soft(page).not.toHaveURL(/new/)
-  })
-})
diff --git a/tests/old_tests/header.spec.js b/tests/old_tests/header.spec.js
deleted file mode 100644
index 8dc34f1..0000000
--- a/tests/old_tests/header.spec.js
+++ /dev/null
@@ -1,220 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('header', () => {
-  const BASE_URL = 'https://magento.softwaretestingboard.com'
-
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('verify Home page title', async ({ page }) => {
-    await expect.soft(page).toHaveTitle('Home Page')
-  })
-
-  test('verify user can navigate to home page clicking on logo from "What\'s New" page', async ({ page }) => {
-    await page.getByRole('listitem').filter({ hasText: "What's New" }).click()
-    await expect.soft(page).toHaveURL(BASE_URL + '/what-is-new.html')
-
-    await page.getByLabel('store logo').click()
-    await expect.soft(page).toHaveURL(BASE_URL)
-  })
-
-  test('navigate to home page clicking on logo from "What\'s New" page', async ({ page }) => {
-    await page.getByRole('listitem').filter({ hasText: "What's New" }).click()
-    await expect.soft(page).toHaveURL(BASE_URL + '/what-is-new.html')
-
-    await page.getByLabel('store logo').click()
-    await expect.soft(page).toHaveURL(BASE_URL)
-  })
-
-  test('Verify the Create an Account link is displayed on the main page in the header', async ({ page }) => {
-    const createAccountPage = page.locator('h1.page-title')
-    await expect.soft(createAccountPage).toBeVisible()
-  })
-
-  test('Verify after clicking the “Create an account" link the Create New Customer Account page opens', async ({ page }) => {
-    await page.getByRole('link', { name: 'Create an Account' }).click()
-
-    const createAccountPage = page.locator('h1.page-title')
-    await expect.soft(createAccountPage).toBeVisible()
-    await expect.soft(page).toHaveURL(BASE_URL + '/customer/account/create/')
-  })
-
-  test('TC 01.1.2_01 | Verify that clicking on Sing in redirects to the login page', async ({ page }) => {
-    const signInLocator = page.locator('.page-header').getByRole('link', { name: 'Sign In' })
-    const LOGIN_PAGE_URL = 'https://magento.softwaretestingboard.com/customer/account/login/referer/aHR0cHM6Ly9tYWdlbnRvLnNvZnR3YXJldGVzdGluZ2JvYXJkLmNvbS8%2C/'
-    const loginMainHeaderLocator = page.getByRole('heading', { name: 'Customer Login' })
-    const sighInHeader = 'Customer Login'
-    await signInLocator.click()
-
-    await expect.soft(page).toHaveURL(LOGIN_PAGE_URL)
-    await expect.soft(loginMainHeaderLocator).toHaveText(sighInHeader)
-  })
-
-  test('TC 01.4.1_01 <Header/Shopping Cart Icon> Verify a counter with the number of items in the cart is displayed after adding new product', async ({ page }) => {
-    await page.getByRole('option', { name: 'XS' }).first().click()
-    await page.getByRole('option', { name: 'Blue' }).first().click()
-    await page.getByTitle('Add to Cart').first().click()
-    const itemsNumber = page.locator('.counter-number')
-    await itemsNumber.waitFor()
-
-    await expect.soft(itemsNumber).toHaveText('1')
-  })
-
-  test('TC 01.1.1_02 <Header/Header logo> Validate website has store logo', async ({ page }) => {
-    const storeLogo = page.locator('.logo img')
-
-    await expect.soft(storeLogo).toBeVisible()
-  })
-
-  test('TC 01.4.1_02 <Header/Shopping Cart Icon> Verify only shopping cart icon is displayed if no items in the shopping cart', async ({ page }) => {
-    const shoppingCartIcon = page.locator('.showcart')
-    const counter = page.locator('.counter-number')
-
-    await expect.soft(shoppingCartIcon).toBeVisible()
-    await expect.soft(counter).not.toBeVisible()
-  })
-
-  test.skip('TC 01.1.2_03 The user can enter login details and authenticate', async ({ page }) => {
-    const signInLocator = page.locator('.page-header').getByRole('link', { name: 'Sign In' })
-    await signInLocator.click()
-
-    const LOGIN_PAGE_URL = 'https://magento.softwaretestingboard.com/customer/account/login/referer/aHR0cHM6Ly9tYWdlbnRvLnNvZnR3YXJldGVzdGluZ2JvYXJkLmNvbS8%2C/'
-    await expect.soft(page).toHaveURL(LOGIN_PAGE_URL)
-
-    let email = 'rimma.mukhoryapova@gmail.com'
-    let password = 'Qwerty123'
-
-    await page.getByLabel('Email').fill(email)
-    await page.getByLabel('Password').fill(password)
-    await page.getByRole('button', { name: 'Sign In' }).click()
-
-    const welcomeText = page.locator('header .logged-in')
-    await expect.soft(welcomeText).toBeVisible()
-  })
-
-  test('TC 01.1.2_02 Link Sign In is located in the top right corner of every page of the website', async ({ page }) => {
-    const signInLocator = page.locator('.page-header').getByRole('link', { name: 'Sign In' })
-    await expect.soft(signInLocator).toBeVisible()
-
-    const headerLinks = page.locator('.header.panel>.header.links')
-    await expect.soft(headerLinks).toHaveCSS('float', 'right')
-
-    const whatsNewPage = page.locator('#ui-id-3')
-    await whatsNewPage.click()
-    await expect.soft(signInLocator).toBeVisible()
-    await expect.soft(headerLinks).toHaveCSS('float', 'right')
-    await expect.soft(headerLinks).toHaveCSS('margin-top', '0px')
-  })
-
-  const navigationMenuNames = ["What's New", 'Women', 'Men', 'Gear', 'Training', 'Sale']
-
-  navigationMenuNames.forEach(item => {
-    test(`TC 01.1.2_04 Link Sign In is located on every ${item} of the website1`, async ({ page }) => {
-      const signInLocator = page.locator('.page-header').getByRole('link', { name: 'Sign In' })
-      await expect.soft(signInLocator).toBeVisible()
-
-      const pageName = page.getByText(item, { exact: true })
-      await pageName.click()
-
-      const pageNameTitle = await page.locator('h1.page-title').innerText()
-      expect.soft(pageNameTitle).toEqual(item)
-      await expect.soft(signInLocator).toBeVisible()
-    })
-  })
-
-  test('TC 01.2.1_08 Drop-down list in the search', async ({ page }) => {
-    await page.getByPlaceholder('Search entire store here').click()
-    await page.getByPlaceholder('Search entire store here').fill('bag')
-    await expect.soft(page.locator('#search_autocomplete > ul > li')).toHaveCount(8)
-  })
-
-  test('Redirect after signing in to the Sale page', async ({ page }) => {
-    const login = 'djiwiixixevpaawtax@cazlv.com'
-    const password = 'Q1234567890!'
-
-    await page.getByText('Sale').click()
-
-    const signInLink = page.getByRole('link', { name: 'Sign In' })
-
-    await signInLink.waitFor()
-    await signInLink.click()
-    await page.locator('#email').fill(login)
-    await page.locator('[title="Password"]').fill(password)
-    await page.getByRole('button', { name: 'Sign In' }).click()
-
-    await expect.soft(page.locator('[class="panel header"] .logged-in')).toBeAttached()
-    await expect.soft(page).toHaveURL(BASE_URL + '/sale.html')
-    await expect.soft(page.getByRole('heading', { name: 'Sale' })).toBeVisible()
-  })
-  test('Verify sign in link is displayed on every page header of the website in the right', async ({ page }) => {
-    const pageLinksArr = [
-      'https://magento.softwaretestingboard.com/what-is-new.html',
-      'https://magento.softwaretestingboard.com/women.html',
-      'https://magento.softwaretestingboard.com/men.html',
-      'https://magento.softwaretestingboard.com/gear.html',
-      'https://magento.softwaretestingboard.com/training.html',
-      'https://magento.softwaretestingboard.com/sale.html',
-      'https://magento.softwaretestingboard.com/customer/account/create/'
-    ]
-    for (let i = 0; i < pageLinksArr.length; i++) {
-      let link = pageLinksArr[i]
-      await page.goto(link)
-      const signInLink = page.locator('.authorization-link').first()
-      const signInBox = await signInLink?.boundingBox()
-      await expect.soft(signInBox.x > signInBox.y).toBe(true)
-    }
-  })
-
-  test('Verify  the automatic search results match the query in the search bar', async ({ page }) => {
-    const searchItem = 'short'
-
-    await page.getByPlaceholder('Search entire store here...').fill(searchItem)
-    await page.waitForSelector('#search_autocomplete>ul>li>span:first-child')
-
-    const autocompleteList = await page.locator('#search_autocomplete>ul>li>span:first-child').allInnerTexts()
-
-    await expect.soft(autocompleteList).toContain(searchItem)
-  })
-
-  test('Verify the search button (magnifier) becomes active after entering one or more letters', async ({ page }) => {
-    await expect.soft(page.locator("button[title='Search']")).toHaveAttribute('disabled')
-
-    await page.getByPlaceholder('Search entire store here...').fill('a')
-    await expect.soft(page.locator("button[title='Search']")).not.toHaveAttribute('disabled')
-  })
-
-  test('The message “You have no items in your shopping cart.“ is displayed.', async ({ page }) => {
-    await page.locator('.showcart').click()
-    await expect.soft(page.locator('.subtitle')).toBeVisible()
-    await expect.soft(page.locator('.subtitle')).toHaveText('You have no items in your shopping cart.')
-  })
-
-  test('Verify the search field is not case-sensitive', async ({ page }) => {
-    const searchItemUpperCase = 'SHORT'
-    const searchItemLowerCase = searchItemUpperCase.toLowerCase()
-
-    await page.getByPlaceholder('Search entire store here...').fill(searchItemUpperCase)
-    await page.waitForSelector('#search_autocomplete>ul>li>span:first-child')
-    const autocompleteListUpperCase = await page.locator('#search_autocomplete>ul>li>span:first-child').allInnerTexts()
-
-    await page.getByPlaceholder('Search entire store here...').clear()
-
-    await page.getByPlaceholder('Search entire store here...').fill(searchItemLowerCase)
-    await page.waitForSelector('#search_autocomplete>ul>li>span:first-child')
-    const autocompleteListLowerCase = await page.locator('#search_autocomplete>ul>li>span:first-child').allInnerTexts()
-
-    await expect.soft(autocompleteListUpperCase.sort()).toEqual(autocompleteListLowerCase.sort())
-    await expect.soft(autocompleteListLowerCase.length).toEqual(autocompleteListUpperCase.length)
-  })
-
-  test('Verify the search button (magnifier) is inactive after the search field is cleared', async ({ page }) => {
-    const wordToType = 'abc'
-
-    await page.getByPlaceholder('Search entire store here...').fill(wordToType)
-    await expect.soft(page.locator("button[title='Search']")).not.toHaveAttribute('disabled')
-
-    await page.getByPlaceholder('Search entire store here...').clear()
-    await expect.soft(page.locator("button[title='Search']")).toHaveAttribute('disabled')
-  })
-})
diff --git a/tests/old_tests/headerPanel.spec.js b/tests/old_tests/headerPanel.spec.js
deleted file mode 100644
index ce66c4d..0000000
--- a/tests/old_tests/headerPanel.spec.js
+++ /dev/null
@@ -1,59 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('headerPanel', () => {
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('TC01.5.1_02 verify that headerPanel has text and buttons Sign In/Create an Account', async ({ page }) => {
-    const expectedHeaderPanel = ['Click “Write for us” link in the footer to submit a guest post', 'Sign In', 'Create an Account']
-
-    const headerPanel = page.locator('ul[class="header links"]:nth-child(1) li')
-    await expect.soft(headerPanel).toHaveCount(3)
-
-    for (let i = 0; i < headerPanel.length; i++) {
-      await expect.soft(elements[i]).toBeVisible()
-    }
-
-    const actualHeaderPanel = await headerPanel.allInnerTexts().then(elements => elements.map(el => el.trim()))
-    expect.soft(actualHeaderPanel).toEqual(expectedHeaderPanel)
-  })
-
-  test('TC 01.5.1_01 verify the header is visible', async ({ page }) => {
-    const baseURL = 'https://magento.softwaretestingboard.com/'
-
-    await expect.soft(page).toHaveURL(baseURL)
-    await expect.soft(page.locator('.page-header')).toBeVisible()
-  })
-
-  test('TC01.5.1_03 Verify that header panel contains Logo of the Luma shop on the left', async ({ page }) => {
-    const logo = page.locator('.logo >img')
-
-    await expect.soft(logo).toBeVisible()
-  })
-})
-
-test.describe('headerPanel verify searchInput', () => {
-  test.beforeEach('before', async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('TC 01.2.1_03 Header/ Verify available Search Bar on HomePage', async ({ page }) => {
-    await page.locator('#search').click()
-
-    await expect.soft(page.locator('#search')).toBeVisible()
-  })
-})
-
-test.describe('headerPanel / Verify shoping cart', () => {
-  test.beforeEach('before', async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('TC 01.4.1_04 Header/Verify Shopping Cart Icon', async ({ page }) => {
-    await page.locator('a[href="https://magento.softwaretestingboard.com/checkout/cart/"]').click()
-
-    await expect.soft(page.locator('div[aria-describedby="ui-id-1"]')).toHaveCSS('display', 'block')
-    await expect.soft(page.locator('a[href="https://magento.softwaretestingboard.com/checkout/cart/"]')).toBeVisible()
-  })
-})
diff --git a/tests/old_tests/headerShoppingCartModalWindow.spec.js b/tests/old_tests/headerShoppingCartModalWindow.spec.js
deleted file mode 100644
index 22cafa8..0000000
--- a/tests/old_tests/headerShoppingCartModalWindow.spec.js
+++ /dev/null
@@ -1,153 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('header shopping cart modal window', () => {
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('verify display the shopping cart icon', async ({ page }) => {
-    const cartIcon = await page.getByRole('link', { name: ' My Cart' })
-
-    await expect.soft(cartIcon).toBeVisible()
-  })
-
-  test('verify the modal windows opens on click on shopping cart icon', async ({ page }) => {
-    await page.getByRole('link', { name: ' My Cart' }).click()
-    const miniCart = await page.locator('#ui-id-1')
-
-    await expect.soft(miniCart).toBeVisible()
-    await expect.soft(page).toHaveURL('/')
-  })
-
-  test('verify display empty shopping cart message', async ({ page }) => {
-    const emptyCardMessageText = 'You have no items in your shopping cart.'
-
-    await page.getByRole('link', { name: ' My Cart' }).click()
-    const emptyCardMessage = await page.locator('.block-minicart .subtitle.empty')
-
-    await expect.soft(emptyCardMessage).toHaveText(emptyCardMessageText)
-  })
-
-  test('Verify Counter Icon Update on Adding/Removing Items ', async ({ page }) => {
-    const counterIcon = page.locator('.counter-number')
-    await expect.soft(counterIcon).toBeHidden()
-
-    const firstProduct = page.locator('.product-item').first()
-    await expect.soft(firstProduct).toContainText('Radiant Tee')
-
-    const labelSizeS = page.getByRole('option', { name: 'S' }).first()
-    await expect.soft(labelSizeS).toBeVisible()
-    await labelSizeS.click()
-
-    const labelColor = page.getByRole('option', { name: 'Blue' }).first()
-    await expect.soft(labelColor).toBeVisible()
-    await labelColor.click()
-    await page.getByText('Add to Cart', { exact: true }).first().click()
-
-    await expect.soft(counterIcon).toHaveText('1')
-
-    const shoppingCart = page.locator('.showcart')
-    await expect.soft(shoppingCart).toBeVisible()
-    shoppingCart.click()
-    await page.getByTitle('Remove item').click()
-    await page.getByRole('button', { name: 'OK' }).click()
-    shoppingCart.click()
-
-    await expect.soft(page.locator('strong.empty')).toHaveText('You have no items in your shopping cart.')
-    await expect.soft(counterIcon).toBeHidden()
-  })
-
-  test('TC 01.3.1_04| Verify quantity and total cost in the shopping cart', async ({ page }) => {
-    const shoppingItem1 = {
-      name: 'Radiant Tee',
-      price: 22.0,
-      size: 'S',
-      color: 'Blue',
-      quantity: 1
-    }
-    const shoppingItem2 = {
-      name: 'Radiant Tee',
-      price: 22.0,
-      size: 'M',
-      color: 'Blue',
-      quantity: 1
-    }
-    const radiantTeeLocator = page.getByTitle('Radiant Tee')
-    const radiantTeeSizeSLocator = page.getByText('S', { exact: true })
-    const radiantTeeSizeMLocator = page.getByText('M', { exact: true })
-    const radiantTeeColorBlueLocator = page.getByRole('option', { name: 'Blue' })
-    const addToCartBtn = page.getByRole('button', { name: 'Add to Cart' })
-    const shoppingCartLink = page.getByRole('link', { name: 'My Cart' })
-    const totalQuantityLocator = page.locator('.count:first-child')
-    const quantityItems = shoppingItem1.quantity + shoppingItem2.quantity
-    const totalCostLocator = page.locator('.subtotal .price')
-    const totalCost = (shoppingItem1.price + shoppingItem2.price).toFixed(2)
-
-    await radiantTeeLocator.click()
-    await radiantTeeSizeSLocator.click()
-    await radiantTeeColorBlueLocator.click()
-    await addToCartBtn.click()
-    await radiantTeeSizeMLocator.click()
-    await addToCartBtn.click()
-    await shoppingCartLink.click()
-
-    await expect.soft(totalQuantityLocator).toHaveText(`${quantityItems}`)
-    await expect.soft(totalCostLocator).toHaveText('$' + totalCost)
-  })
-
-  test('Verify after clicking "X" icon in the Modal window the Modal window is closed', async ({ page }) => {
-    await page.locator('.showcart').click()
-    await page.locator('#btn-minicart-close').click()
-
-    await expect.soft(page.locator('ui-id-1')).not.toBeVisible()
-  })
-  test('TC 01.3.1_06 |"Proceed to Checkout" button is visible, clickable and redirects to the Shipping Page', async ({ page }) => {
-    const radiantTeeLocator = page.getByTitle('Radiant Tee')
-    const radiantTeeSizeSLocator = page.getByText('S', { exact: true })
-    const radiantTeeColorBlueLocator = page.getByRole('option', { name: 'Blue' }, { exact: true })
-    const addToCartBtn = page.getByRole('button', { name: 'Add to Cart' })
-    const countIconLocator = page.locator('.counter-number')
-    const shoppingCartLink = page.getByRole('link', { name: 'My Cart' })
-    const proceedToCheckoutBtn = page.getByRole('button', { name: 'Proceed to Checkout' })
-    const shippingAddressHeaderLocator = page.getByText('Shipping Address')
-
-    await radiantTeeLocator.click()
-    await radiantTeeSizeSLocator.click()
-    await radiantTeeColorBlueLocator.click()
-    await addToCartBtn.click()
-    await countIconLocator.waitFor()
-    await shoppingCartLink.click()
-
-    await expect.soft(proceedToCheckoutBtn).toBeVisible()
-    await proceedToCheckoutBtn.click()
-    await shippingAddressHeaderLocator.waitFor()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/checkout/#shipping')
-    await expect.soft(shippingAddressHeaderLocator).toHaveText('Shipping Address')
-  })
-
-  test('Verify the total cost of all items in the cart', async ({ page }) => {
-    await page.getByRole('option', { name: 'XS' }).first().click()
-    await page.getByRole('option', { name: 'Blue' }).first().click()
-    await page.getByTitle('Add to Cart').first().click()
-    await page.locator('li').filter({ hasText: 'Argus All-Weather Tank As low' }).getByRole('option', { name: 'XS' }).click()
-    await page.locator('li').filter({ hasText: 'Argus All-Weather Tank As low' }).getByLabel('Gray').click()
-    await page.locator('li').filter({ hasText: 'Argus All-Weather Tank As low' }).getByTitle('Add to Cart').click()
-    const itemsNumber = page.locator('.counter-number')
-    await itemsNumber.waitFor()
-    await itemsNumber.click()
-    const totalPrice = (await page.locator('.minicart-price .price').allInnerTexts())
-      .map(el => +el.replace(/\$/g, ''))
-      .reduce((acc, cur) => acc + cur, 0)
-      .toFixed(2)
-
-    await expect.soft(page.locator('.amount.price-container .price')).toHaveText('$' + totalPrice)
-  })
-
-  test('Verify the modal windows can close', async ({ page }) => {
-    await page.locator('.action.showcart').click()
-    await page.locator('.action.close').click()
-
-    await expect.soft(page.locator('.subtitle.empty')).not.toBeVisible()
-  })
-})
diff --git a/tests/old_tests/homePage.spec.js b/tests/old_tests/homePage.spec.js
deleted file mode 100644
index 51ccc53..0000000
--- a/tests/old_tests/homePage.spec.js
+++ /dev/null
@@ -1,249 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('homePage', () => {
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('verify Url on the home page', async ({ page }) => {
-    await page.locator('.logo').click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com')
-  })
-
-  test('goto Yoga Collection page', async ({ page }) => {
-    await page.locator('.block-promo.home-main').click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/collections/yoga-new.html')
-  })
-
-  const firstCardURL = 'https://magento.softwaretestingboard.com/radiant-tee.html'
-
-  test('1st card: clicking card image redirects to respective product card', async ({ page }) => {
-    await page.getByAltText('Radiant Tee').click()
-
-    await expect.soft(page).toHaveURL(firstCardURL)
-    await expect.soft(page.getByRole('heading', { name: 'Radiant Tee' })).toBeVisible()
-  })
-
-  test('1st card: clicking card name redirects to respective product cards', async ({ page }) => {
-    await page.locator('a[title="Radiant Tee"]').click()
-
-    await expect.soft(page).toHaveURL(firstCardURL)
-    await expect.soft(page.getByRole('heading', { name: 'Radiant Tee' })).toBeVisible()
-  })
-
-  test('1st card: clicking card reviews redirects to "reviews" tab on respective product card', async ({ page }) => {
-    await page.locator('a.action.view[href*="radiant-tee"]').click()
-
-    await expect.soft(page.getByRole('heading', { name: 'Radiant Tee' })).toBeVisible()
-    await expect.soft(page.locator('#product-review-container')).toBeVisible()
-  })
-
-  const secondCardURL = 'https://magento.softwaretestingboard.com/breathe-easy-tank.html'
-
-  test('2st card: clicking the card image redirects to the respective product card', async ({ page }) => {
-    await page.getByAltText('Breathe-Easy Tank').click()
-
-    await expect.soft(page).toHaveURL(secondCardURL)
-    await expect.soft(page.getByRole('heading', { name: 'Breathe-Easy Tank' })).toBeVisible()
-  })
-
-  test('2st card: clicking the card name redirects to the respective product card', async ({ page }) => {
-    await page.locator('a[title="Breathe-Easy Tank"]').click()
-
-    await expect.soft(page).toHaveURL(secondCardURL)
-    await expect.soft(page.getByRole('heading', { name: 'Breathe-Easy Tank' })).toBeVisible()
-  })
-
-  test('2st card: clicking card reviews redirects to "reviews" tab on respective product card', async ({ page }) => {
-    await page.locator('a[class="action view"][href*="breathe-easy-tank"]').click()
-
-    await expect.soft(page.getByRole('heading', { name: 'Breathe-Easy Tank' })).toBeVisible()
-    await expect.soft(page.locator('#product-review-container')).toBeVisible()
-  })
-
-  const thirdCardURL = 'https://magento.softwaretestingboard.com/argus-all-weather-tank.html'
-
-  test('3rd card: clicking the card image redirects to the respective product card', async ({ page }) => {
-    await page.getByAltText('Argus All-Weather Tank').click()
-
-    await expect.soft(page).toHaveURL(thirdCardURL)
-    await expect.soft(page.getByRole('heading', { name: 'Argus All-Weather Tank' })).toBeVisible()
-  })
-
-  test('3rd card: clicking the card name redirects to the respective product card', async ({ page }) => {
-    await page.locator('a[title="Argus All-Weather Tank"]').click()
-
-    await expect.soft(page).toHaveURL(thirdCardURL)
-    await expect.soft(page.getByRole('heading', { name: 'Argus All-Weather Tank' })).toBeVisible()
-  })
-
-  const fourthCardURL = 'https://magento.softwaretestingboard.com/hero-hoodie.html'
-
-  test('4th card: clicking the card image redirects to the respective product card', async ({ page }) => {
-    await page.getByAltText('Hero Hoodie').click()
-
-    await expect.soft(page).toHaveURL(fourthCardURL)
-    await expect.soft(page.getByRole('heading', { name: 'Hero Hoodie' })).toBeVisible()
-  })
-
-  test('4th card: clicking the card name redirects to the respective product card', async ({ page }) => {
-    await page.locator('a[title="Hero Hoodie"]').click()
-
-    await expect.soft(page).toHaveURL(fourthCardURL)
-    await expect.soft(page.getByRole('heading', { name: 'Hero Hoodie' })).toBeVisible()
-  })
-
-  const fifthCardURL = 'https://magento.softwaretestingboard.com/fusion-backpack.html'
-
-  test('5th card: clicking the card image redirects to the respective product card', async ({ page }) => {
-    await page.getByAltText('Fusion Backpack').click()
-
-    await expect.soft(page).toHaveURL(fifthCardURL)
-    await expect.soft(page.getByRole('heading', { name: 'Fusion Backpack' })).toBeVisible()
-  })
-
-  test('5th card: clicking the card name redirects to the respective product card', async ({ page }) => {
-    await page.locator('a[title="Fusion Backpack"]').click()
-
-    await expect.soft(page).toHaveURL(fifthCardURL)
-    await expect.soft(page.getByRole('heading', { name: 'Fusion Backpack' })).toBeVisible()
-  })
-
-  test('5th card: clicking card reviews redirects to "reviews" tab on respective product card', async ({ page }) => {
-    await page.locator('a[class="action view"][href*="fusion-backpack"]').click()
-
-    await expect.soft(page.getByRole('heading', { name: 'Fusion Backpack' })).toBeVisible()
-    await expect.soft(page.locator('#product-review-container')).toBeVisible()
-  })
-
-  const sixthCardURL = 'https://magento.softwaretestingboard.com/push-it-messenger-bag.html'
-
-  test('6th card: clicking the card image redirects to the respective product card', async ({ page }) => {
-    await page.getByAltText('Push It Messenger Bag').click()
-
-    await expect.soft(page).toHaveURL(sixthCardURL)
-    await expect.soft(page.getByRole('heading', { name: 'Push It Messenger Bag' })).toBeVisible()
-  })
-
-  test('6th card: clicking the card name redirects to the respective product card', async ({ page }) => {
-    await page.locator('a[title="Push It Messenger Bag"]').click()
-
-    await expect.soft(page.getByRole('heading', { name: 'Push It Messenger Bag' })).toBeVisible()
-    await expect.soft(page).toHaveURL(sixthCardURL)
-  })
-
-  test('6th card: clicking card reviews redirects to "reviews" tab on respective product card', async ({ page }) => {
-    await page.locator('a[class="action view"][href*="push-it-messenger-bag"]').click()
-
-    await expect.soft(page.locator('#product-review-container')).toBeVisible()
-    await expect.soft(page.getByRole('heading', { name: 'Push It Messenger Bag' })).toBeVisible()
-  })
-
-  test('Click on the "Erin recommends" block', async ({ page }) => {
-    await page.locator('.block-promo.home-erin').click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/collections/erin-recommends.html')
-  })
-
-  test('Redirect to "Whats New" page', async ({ page }) => {
-    await page.getByText("What's New").click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/what-is-new.html')
-    await expect.soft(page).toHaveTitle("What's New")
-  })
-
-  test('1st card: image changes according to the selected color', async ({ page }) => {
-    const colorLables = ['Blue', 'Orange', 'Purple']
-
-    for (const color of colorLables) {
-      const locatorForColors = `.swatch-opt-1556>.swatch-attribute.color>div>div[option-label="${color}"]`
-
-      await page.locator(locatorForColors).click()
-      await expect.soft(page.locator(locatorForColors)).toHaveClass('swatch-option color selected')
-
-      const colorCode = color.toLowerCase()
-      const imageUrl = `https://magento.softwaretestingboard.com/pub/media/catalog/product/cache/7c4c1ed835fbbf2269f24539582c6d44/w/s/ws12-${colorCode}_main_1.jpg`
-
-      await expect.soft(page.locator(`.product-items > li:first-child a img[src="${imageUrl}"]`)).toBeVisible()
-    }
-  })
-
-  test('2st card: image changes according to the selected color', async ({ page }) => {
-    const colorLables2card = ['Purple', 'White', 'Yellow']
-
-    for (const color2 of colorLables2card) {
-      const locatorForColors2card = `.swatch-opt-1812>.swatch-attribute.color>div>div[option-label="${color2}"]`
-
-      await page.locator(locatorForColors2card).click()
-      await expect.soft(page.locator(locatorForColors2card)).toHaveClass('swatch-option color selected')
-
-      const colorCode2 = color2.toLowerCase()
-      const imgUrl2card = `https://magento.softwaretestingboard.com/pub/media/catalog/product/cache/7c4c1ed835fbbf2269f24539582c6d44/w/t/wt09-${colorCode2}_main_1.jpg`
-
-      await expect.soft(page.locator(`img[src$="${imgUrl2card}"]`)).toBeVisible()
-    }
-  })
-
-  test('3rd card: image changes according to the selected color', async ({ page }) => {
-    const locatorForColors3card = `.product-items>li:nth-child(3)>div>div>div>div:nth-child(2)>div>div`
-
-    await page.locator(locatorForColors3card).click()
-
-    await expect.soft(page.locator(locatorForColors3card)).toHaveClass('swatch-option color selected')
-
-    await expect.soft(page.getByAltText('Argus All-Weather Tank')).toBeVisible()
-  })
-
-  test('Verify user can make search entered the valid text in the search field', async ({ page }) => {
-    const validText = 'jacket'
-    const redirectedPage = 'https://magento.softwaretestingboard.com/catalogsearch/result/?q=jacket'
-
-    await page.locator('#search').fill(validText)
-    await page.locator('.actions > button').click()
-
-    await expect.soft(page).toHaveURL(redirectedPage)
-    await expect.soft(page).toHaveTitle(`Search results for: '${validText}'`)
-  })
-
-  test('Verify user doesn`t receive the results when make search with invalid text ', async ({ page }) => {
-    const inValidText = 'testdghsh'
-
-    await page.locator('#search').fill(inValidText)
-    await page.locator('.actions > button').click()
-
-    const warningMessage = page.locator('.message.notice').getByText(' Your search returned no results. ')
-    await expect.soft(warningMessage).toHaveText(' Your search returned no results. ')
-
-    const noResultsInfo = page.locator('#toolbar-amount').getByText(' Items ')
-    await expect.soft(noResultsInfo).toBeHidden()
-  })
-
-  test('4th card: image changes according to the selected color', async ({ page }) => {
-    const colorLabels4card = ['Black', 'Gray', 'Green']
-
-    for (const color4 of colorLabels4card) {
-      const locatorForColors4card = `.product-items>li:nth-child(4) .swatch-attribute.color [option-label="${color4}"]`
-      await page.locator(locatorForColors4card).click()
-      await expect.soft(page.locator(locatorForColors4card)).toHaveClass('swatch-option color selected')
-
-      const colorCode4 = color4.toLowerCase()
-      const imgUrl4card = `https://magento.softwaretestingboard.com/pub/media/catalog/product/cache/7c4c1ed835fbbf2269f24539582c6d44/m/h/mh07-${colorCode4}_main_1.jpg`
-
-      await expect.soft(page.locator(`img[src$="${imgUrl4card}"]`)).toBeVisible()
-    }
-  })
-
-  test('Verify that Shop Pants link redirects to the corresponding page', async ({ page }) => {
-    await page.locator('.action.more.icon').first().click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/promotions/pants-all.html')
-  })
-
-  test('Verify that Shop Tees link redirects to the corresponding page', async ({ page }) => {
-    await page.locator('.block-promo.home-t-shirts .action.more.icon').click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/promotions/tees-all.html')
-  })
-})
diff --git a/tests/old_tests/homepage_navigation.spec.js b/tests/old_tests/homepage_navigation.spec.js
deleted file mode 100644
index ddd13f8..0000000
--- a/tests/old_tests/homepage_navigation.spec.js
+++ /dev/null
@@ -1,74 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('Homepage | Navigation', () => {
-  const allMenuLinks = ["What's New", 'Women', 'Men', 'Gear', 'Training', 'Sale']
-
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('TC 03.1.1_02 Verify that Navigation has 6 links', async ({ page }) => {
-    const navigation = page.getByRole('navigation')
-    const navitems = navigation.getByRole('listitem')
-
-    expect.soft(await navitems.count()).toEqual(6)
-  })
-
-  allMenuLinks.forEach(link => {
-    test(`TC 03.1.1_03 Verify redirect to ${link} page`, async ({ page }) => {
-      const navLink = page.getByText(link, { exact: true })
-      await navLink.click()
-      const actualTitle = await page.locator('h1>span').innerText()
-
-      expect.soft(actualTitle).toEqual(link)
-    })
-  })
-
-  test('TC 03.1.1_04 Verify text of Navigation links', async ({ page }) => {
-    const menuLinks = page.getByRole('navigation').getByRole('listitem')
-    const allLinksText = await menuLinks.allInnerTexts()
-
-    expect.soft(allLinksText).toEqual(allMenuLinks)
-  })
-
-  test("TC 04.1.1_02 <Menu/What's New> Visible title What's New", async ({ page }) => {
-    await expect.soft(page.getByRole('menuitem', { name: "What's New" })).toBeVisible()
-  })
-
-  test('TC 04.2.1_04 <Menu/Women> Title Women is visible', async ({ page }) => {
-    await expect.soft(page.getByRole('menuitem', { name: ' Women' })).toBeVisible()
-  })
-
-  test('TC 04.2.1_06 <Menu/Women> Click title Women', async ({ page }) => {
-    await page.getByRole('menuitem', { name: ' Women' }).click()
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/women.html')
-  })
-
-  test('TC 04.2.1_07 Verify user can hover over the title “Women” and see dropdown list with 2 subcategories', async ({ page }) => {
-    const womenCategories = ['Tops', 'Bottoms']
-    await page.getByText('Women', { exact: true }).hover()
-
-    await expect.soft(page.locator('.nav-2 > ul > li > a')).toHaveText(womenCategories)
-  })
-
-  test('TC 05.2.2 Women/Bottoms/Breadcrumbs', async ({ page }) => {
-    await page.locator('.level0.nav-2').hover()
-    await page.locator('#ui-id-10').click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/women/bottoms-women.html')
-    await expect.soft(page.getByRole('heading', { name: 'Bottoms' })).toBeVisible()
-    await expect.soft(page.locator('.item.home')).toBeVisible()
-    await expect.soft(page.locator('.item.category20')).toBeVisible()
-    await expect.soft(page.locator('.item.category22')).toBeVisible()
-  })
-
-  test('TC 04.1.1_03 The link "What is new?" is displayed and clickable.', async ({ page }) => {
-    const linkWhat = page.getByRole('menuitem', { name: "What's New" })
-    await expect.soft(linkWhat).toBeVisible()
-
-    await linkWhat.click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/what-is-new.html')
-    await expect.soft(page).toHaveTitle("What's New")
-  })
-})
diff --git a/tests/old_tests/logoIcon.spec.js b/tests/old_tests/logoIcon.spec.js
deleted file mode 100644
index 27eb3c3..0000000
--- a/tests/old_tests/logoIcon.spec.js
+++ /dev/null
@@ -1,26 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('Check logo icon navigation', () => {
-  const linksArr = [
-    'https://magento.softwaretestingboard.com/what-is-new.html',
-    'https://magento.softwaretestingboard.com/women.html',
-    'https://magento.softwaretestingboard.com/men.html',
-    'https://magento.softwaretestingboard.com/gear.html',
-    'https://magento.softwaretestingboard.com/training.html',
-    'https://magento.softwaretestingboard.com/sale.html',
-    'https://magento.softwaretestingboard.com/customer/account/create/'
-  ]
-
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('Click on LOGO', async ({ page }) => {
-    for (let i = 0; i < linksArr.length; i++) {
-      let link = linksArr[i]
-      await page.goto(link)
-      await page.locator('.logo').click()
-      await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com')
-    }
-  })
-})
diff --git a/tests/old_tests/mainMenuNavigation.spec.js b/tests/old_tests/mainMenuNavigation.spec.js
deleted file mode 100644
index 71e5afa..0000000
--- a/tests/old_tests/mainMenuNavigation.spec.js
+++ /dev/null
@@ -1,28 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('menu navigation', () => {
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('should be main menu and options', async ({ page }) => {
-    const navigation = page.locator('#ui-id-2')
-    const menuOptions = ["What's New", 'Women', 'Men', 'Gear', 'Training', 'Sale']
-    await expect.soft(navigation).toBeVisible()
-    await expect.soft(navigation).toHaveCSS('background', 'rgba(0, 0, 0, 0) none repeat scroll 0% 0% / auto padding-box border-box')
-    await expect.soft(navigation).toBeVisible(menuOptions)
-  })
-  test('verify User can see 6 menu options on the main page with particular text', async ({ page }) => {
-    let array = ["What's New", 'Women', 'Men', 'Gear', 'Training', 'Sale']
-
-    const menuOptionsLocator = page.locator('.level-top.ui-corner-all')
-    const menuOptionsLocatorTexts = await menuOptionsLocator.allInnerTexts()
-
-    expect.soft(menuOptionsLocatorTexts).toEqual(array)
-  })
-  test('verify Main menu is displayed on the top of the home page in the grey field', async ({ page }) => {
-    const menuBar = await page.locator('.navigation')
-
-    await expect.soft(menuBar).toHaveCSS('background-color', 'rgb(240, 240, 240)')
-  })
-})
diff --git a/tests/old_tests/menBottoms.spec.js b/tests/old_tests/menBottoms.spec.js
deleted file mode 100644
index 4529687..0000000
--- a/tests/old_tests/menBottoms.spec.js
+++ /dev/null
@@ -1,58 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('menBottoms', () => {
-  const menBottomsSizes = ['32', '33', '34', '36']
-
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test("Selection the men's bottom section", async ({ page }) => {
-    await page.getByRole('menuitem', { name: ' Men' }).hover()
-    await page.locator('#ui-id-18').click()
-
-    await expect.soft(page.locator('//span[@data-ui-id="page-title-wrapper" and text()= "Bottoms"]')).toHaveText('Bottoms')
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/men/bottoms-men.html')
-  })
-
-  menBottomsSizes.forEach(size => {
-    test(`Verify possibility to choose size ${size} from filter on side menu`, async ({ page }) => {
-      await page.getByRole('menuitem', { name: ' Men' }).hover()
-      await page.locator('#ui-id-18').click()
-
-      await page.getByText('SIZE').click()
-      await page.locator(`.swatch-attribute-options .swatch-option.text[option-label='${size}']`).last().click()
-
-      const cardSizeLocator = page.locator('li').filter({ hasText: 'Pierce Gym Short' }).getByLabel(`${size}`)
-      await expect.soft(page.locator('.filter-value')).toHaveText(`${size}`)
-      await expect.soft(cardSizeLocator).toHaveCSS('outline', 'rgb(255, 85, 1) solid 2px')
-    })
-  })
-
-  test("Verify men's bottom tab", async ({ page }) => {
-    await page.locator('#ui-id-5').hover()
-    await page.getByRole('menuitem', { name: 'Bottoms' }).click()
-
-    await expect.soft(page.getByRole('heading', { name: 'Bottoms' })).toBeVisible()
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/men/bottoms-men.html')
-  })
-
-  test("Verify the men's bottom section", async ({ page }) => {
-    const BASE_URL = 'https://magento.softwaretestingboard.com'
-
-    await page.locator('a[href*="/men.html"]').hover()
-    await page.locator("a[href*='/bottoms-men.html']").click()
-
-    await expect.soft(page.getByRole('menuitem', { name: ' Men' })).toHaveText('Men')
-    await expect.soft(page).toHaveURL(BASE_URL + '/men/bottoms-men.html')
-    await expect.soft(page).toHaveTitle('Bottoms - Men')
-  })
-
-  test('Verify redirection to Men-Bottoms page from Men page', async ({ page }) => {
-    await page.getByRole('menuitem', { name: 'Men' }).last().click()
-    await page.getByRole('link', { name: 'Bottoms' }).click()
-
-    await expect.soft(page.getByRole('heading', { name: 'Bottoms' })).toBeVisible()
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/men/bottoms-men.html')
-  })
-})
diff --git a/tests/old_tests/menBottomsBreadcrumbs.spec.js b/tests/old_tests/menBottomsBreadcrumbs.spec.js
deleted file mode 100644
index 03a28d1..0000000
--- a/tests/old_tests/menBottomsBreadcrumbs.spec.js
+++ /dev/null
@@ -1,29 +0,0 @@
-import { expect, test } from '@playwright/test'
-
-test.describe('Men/Bottoms/Breadcrumbs', () => {
-  test.beforeEach(async ({ page }) => {
-    await page.goto('/')
-  })
-
-  test('Men have breadcrumb navigation on the “Men/Bottoms” page and back', async ({ page }) => {
-    const breadcrumbMenuMen = page.locator('xpath=//li[@class="item category11"]/a[@href="https://magento.softwaretestingboard.com/men.html"]')
-    const breadcrumbMenuHome = page.locator('xpath=//li[@class="item home"]/a[@href="https://magento.softwaretestingboard.com/"]')
-
-    await page.getByRole('menuitem', { name: 'Men' }).last().hover()
-    await page.getByRole('menuitem', { name: 'Bottoms' }).click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/men/bottoms-men.html')
-    await expect.soft(page.locator('//div[@class="breadcrumbs"]')).toBeVisible()
-    await expect.soft(page.locator('[class="item home"]')).toHaveText(' Home ')
-    await expect.soft(page.locator('[class="item category11"]')).toHaveText(' Men ')
-    await expect.soft(page.locator('[class="item category13"]')).toHaveText('Bottoms')
-
-    await breadcrumbMenuMen.click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com/men.html')
-
-    await breadcrumbMenuHome.click()
-
-    await expect.soft(page).toHaveURL('https://magento.softwaretestingboard.com')
-
```